use strict;
use warnings;
use Rex -feature => [qw( 1.4 exec_autodie)];

# Plan:
# Setup and configure Apache
# Add a simple CGI script written in Perl using CGI.pm
# Convert the script to use PSGI and run it as CGI.
# Set up Starman to run the PSGI without the CGI.
# Map Apache as a reverse proxy to be able to serve from Starman as well.

group all => qw(104.131.31.71);
user 'root';

desc 'Just printing hostname';
task 'print_hostname', sub {
    say run('hostname');
};

desc 'Install Apache';
task 'install_apache', sub {
    update_package_db;
    pkg 'apache2', ensure => 'present';
    service 'apache2', ensure => 'started';
};

desc 'Setup Apache';
task 'setup_apache',  sub {
    file '/etc/apache2/sites-enabled/000-default.conf', ensure => 'absent';
    file '/etc/apache2/sites-enabled/apache.conf',
        source => 'files/etc/apache2/sites-enabled/apache.conf';

    run('a2enmod cgid');
    run('a2enmod proxy');
    run('a2enmod proxy_http');

    # TODO collect information if the files were changed and if modules had to be enabled and only restart if something really changed.
    service 'apache2' => 'restart';
};

desc 'Setup CGI';
task 'setup_cgi', sub {
    # mkdir
    file '/var/cgi-bin', ensure => 'directory';

    #copy file, set mode
    file '/var/cgi-bin/app.cgi',
        source => 'files/var/cgi-bin/app.cgi',
        mode => '0755';

    # install CGI.pm
    my $packages = ['libcgi-pm-perl'];
    pkg $packages, ensure => 'present';

    # Verify that we can run /var/cgi-bin/app.cgi
    eval {
        my $out = run('/var/cgi-bin/app.cgi');
        die "Wrong output $out" if index($out, 'Content-Type: text/html; charset=utf8') < 0;
    };
    die "Could not run CGI script on the command line $@" if $@;
};

desc 'Setup PSGI as CGI';
task 'setup_psgi', sub {
    #copy file, set mode
    file '/var/cgi-bin/app.psgi',
        source => 'files/var/cgi-bin/app.psgi',
        mode => '0755';

    # install  Plack
    my $packages =  ['libplack-perl'];
    pkg $packages, ensure => 'present';
};

desc 'Install Starman and configure it as a service';
task 'setup_starman', sub {
    my $packages = ['starman'];
    pkg $packages, ensure => 'present';

    file '/etc/systemd/system/starman.service',
        source => 'files/etc/systemd/system/starman.service';

    service 'starman', ensure => 'started';
};


desc 'Access the CGI script through the public URL';
task 'verify_cgi', sub {
    use LWP::UserAgent;
    my $ua = LWP::UserAgent->new;
    my $server = connection->server;
    my $res_get = $ua->get("http://$server/cgi-bin/app.cgi?name=Foo");
    my $html_get = $res_get->decoded_content;
    die "Wrong output '$html_get'" if $html_get ne "Hello Foo\n";

    my $res_post = $ua->post("http://$server/cgi-bin/app.cgi", {name => 'Foo' });
    my $html_post = $res_post->decoded_content;
    die "Wrong output '$html_post'" if $html_post ne "Hello Foo\n";
};

desc 'Access the PSGI script in CGI mode';
task 'verify_psgi', sub {
    use LWP::UserAgent;
    my $ua = LWP::UserAgent->new;
    my $server = connection->server;
    my $res_get = $ua->get("http://$server/cgi-bin/app.psgi?name=Foo");
    my $html_get = $res_get->decoded_content;
    die "Wrong output '$html_get'" if $html_get ne "Hello Foo\n";

    my $res_post = $ua->post("http://$server/cgi-bin/app.psgi", {name => 'Foo' });
    my $html_post = $res_post->decoded_content;
    die "Wrong output '$html_post'" if $html_post ne "Hello Foo\n";
};

desc 'Access the PSGI script via Starman';
task 'verify_starman', sub {
    use LWP::UserAgent;
    my $ua = LWP::UserAgent->new;
    my $server = connection->server;

    {
        my $res_get = $ua->get("http://$server:81?name=Foo");
        my $html_get = $res_get->decoded_content;
        die "Wrong output '$html_get'" if $html_get ne "Hello Foo\n";
    }

    {
        my $res_post = $ua->post("http://$server:81", {name => 'Foo' });
        my $html_post = $res_post->decoded_content;
        die "Wrong output '$html_post'" if $html_post ne "Hello Foo\n";
    }

    {
        my $res_get = $ua->get("http://$server/starman/?name=Foo");
        my $html_get = $res_get->decoded_content;
        die "Wrong output '$html_get'" if $html_get ne "Hello Foo\n";
    }

    {
        my $res_post = $ua->post("http://$server/starman/", {name => 'Foo' });
        my $html_post = $res_post->decoded_content;
        die "Wrong output '$html_post'" if $html_post ne "Hello Foo\n";
    }
};


task 'setup', sub {
    for my $task (qw(
        install_apache
        setup_apache
        setup_cgi
        setup_psgi
        setup_starman
        verify_cgi
        verify_psgi
        verify_starman
        )) {
        do_task($task); # run task?, batch
    }
};


# vim: syntax=perl
