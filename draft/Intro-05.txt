POD - Plain Old Documentation

<p>
Programadores de forma geral não gostam muito de escrever a documentação de seus projetos. Parte da razão é que os programas são basicamente arquivos de texto simples, mas em muitos casos os desenvolvedores são obrigados a escrever a documentação em algum processador de texto.
</p>

<p>
Isso requer a aprendizagem do processador de texto assim como o investimento de muita energia em tentar fazer o documento ter "boa aparência" em vez de "ter bom conteúdo".
</p>

<p>
Este não é o caso com Perl. Normalmente você escreveria a documentação de seus módulos direito no código fonte e confiaria em alguma ferramenta externa para formatá-lo a fim de deixá-lo com boa aparência.
</p>

<p>
Neste episódio do <a href="/perl-tutorial">Tutorial Perl</a> vamos conhecer o POD <i>Plain Old Documentation</i>, que é a linguagem de marcação usada pelos desenvolvedores perl.
</p>

<p>
Veja abaixo como um simples pedaço de código perl aparenta ser com a documentação POD:
</p>

<pre class="prettyprint linenums languague-perl">
#!/usr/bin/perl
use strict;
use warnings;

=pod

=head1 DESCRIPTION

This script can have 2 parameters. The name or address of a machine
and a command. It will execute the command on the given machine and
print the output to the screen.

=cut

print "Here comes the code ... \n";
</pre>

<p>
Se você salvar este código como <b>script.pl</b> e executá-lo usando <b>perl script.pl</b>,
o perl irá ignorar qualquer coisa entre as linhas <b>=pod</b> e o <b>=cut </b>.
Somente o código em si será executado.
</p>

<p>
Por outro lado, se você digitar o comando <b>perldoc script.pl</b>, o <b>perldoc</b> 
irá desconsiderar todo o código. Ele vai buscar as linhas entre <b>=pod</b> e <b>=cut</b>,
para então formatá-las e exibi-las na tela.
</p>

<p>
Estas regras variam de acordo com o seu sistema operacional, mas elas são exatamente as mesmas que você viu quando aprendemos sobre a  
<a href="/core-perl-documentation-cpan-module-documentation">documentação padrão do Perl</a>.
</p>

<p>
A importância da utilização do POD incorporado é que seu código jamais será fornecido
acidentalmente sem a documentação, pois a documentação está dentro dos módulos e dos scripts.
Você também pode reutilizar as ferramentas e infra-estrutura da comunidade Open Source Perl
construído para si. Mesmo para os seus fins <i>in-house.</i>
</p>

<h2>Muito simples?</h2>

<p>
O pressuposto aqui é que ao remover a maioria dos obstáculos presentes na escrita da 
documentação, então mais pessoas vão escrever a documentação em seus projetos. Em vez de aprender como usar um processador de texto para criar documentos com aparência agradável, você irá somente digitar um texto com alguns símbolos extras e então obter um documento de aparência razoável. (Confira os documentos sobre <a href="http://metacpan.org/"> Meta CPAN </ a> para ver uma versão bem formatada do POD).
</p>

<h2> A linguagem de marcação </ h2>

<p>
Uma descrição detalhada da <a href="http://perldoc.perl.org/perlpod.html"> linguagem de marcação POD</a>
pode ser encontrada digitando na linha de comandos <a href="http://perldoc.perl.org/perlpod.html"> perldoc perlpod </a>. 
</p>

<p>
Existem também <i>tags</i> como a <b>=head1</b> e <b>=head2</b> utilizadas para sinalizar os cabeçalhos "mais importantes" e "um pouco menos importante".
Há também o <b>=over </b>utilizado para indentações e <b>=item</b>
para permitir a criação de <i>bullet points</i>, entre outros.
</p>

<p>
Há também o <b>=cut</b> para marcar o fim de uma seção POD e <b>=pod</b> para iniciar uma.
Embora esta marcação inicial não seja estritamente necessária.
</p>

<p>
Qualquer sequência que começa com um sinal de igual <b>=</b> como o primeiro caractere em uma linha irá ser interpretada como uma marcação POD, e vai começar uma seção POD fechado por <b>=cut</b>
</p>

<p>
O POD ainda permite a incorporação de hiper-links usando a notação L<nome-do-link>.
</p>

<p>
O texto entre as partes de marcação será mostrado como parágrafos de texto simples.
</p>

<p>
Se o texto não for iniciado no primeiro caractere da linha, ele será levado literalmente,
o que significa que será exatamente como você os digitou: longos textos irão permanecer longos e textos curtos permanecerão curtos. Este exemplo é usado para exemplos de código.
</p>

<p>
Uma coisa importante a lembrar é que POD requer linhas vazias ao redor das <i>tags</i>.
Assim:
</p>

<pre class="prettyprint linenums languague-perl">
=head1 Título
=head2 legenda
Algum texto
=cut
</pre>

<p>
Não vai fazer o que você está esperando.
</p>

<h2> A Aparência </ h2>

<p>
Como o POD é uma linguagem de marcação, ela não irá por si só definir como as coisas serão exibidas.
Ao usar o <b>=head1</b> estamos apenas indicando algo importante, <b>=head2</b> significa, por exemplo algo menos importante.
</p>

<p>
A ferramenta que é utilizada para apresentar o POD irá normalmente usar caracteres maiores para exibir o texto de uma head1 do que a de um head2 que por sua vez irá ser exibida usando fontes maiores do que o texto normal. O controle está nas mãos da ferramenta de exibição.
</p>

<p>
O comando <b>perldoc</b>que vem com perl exibe o POD como uma página manual (<i>mand-page</i>). É uma ferramenta bastante útil em Linux.
Mas não tão boa assim no Windows.
</p>

<p>
O módulo <a href="https://metacpan.org/module/Pod::Html">Pod::Html</a> fornece outra ferramenta de linha de comando chamado <b>pod2html</b>. Essa ferramenta é capaz de converter um texto POD em um documento HTML que você pode ver em seu navegador.
</p>

<p>
Há também ferramentas adicionais para geração de arquivos do tipo pdf ou arquivos mobi a partir do POD.
</p>

<h2> Público Alvo </ h2>

<p>
Depois de ver a técnica, vamos ver quem é o público alvo?
</p>


<p>
Os comentários de código (o texto que começa com um #) são explicações para
os programadores ou responsáveis pela manutenção do código. Neste caso é a
pessoa que precisa de recursos para realizar a manutenção do código.
</p>

<p>
A documentação escrita em POD é útil aos usuários. Pessoas que não irão
olhar o código fonte. No caso de uma aplicação, este são chamados de "usuários finais".
Ou seja, todos nós.
</p>

<p>
No caso dos módulos Perl, os usuários são outros programadores Perl que desejam
construir aplicações e outros módulos. A princípio eles não precisariam olhar seu código fonte. Eles devem ser capazes de usar seu módulo apenas lendo a documentação via <b>perldoc</b>.
</p>

<h2> Conclusão </ h2>

<p>
Escrever a documentação do código e fazer com que pareça agradável não é nada
difícil de ser feita em Perl.
</p>


<p>
Escrito por <a href="https://plus.google.com/102810219707784087582?rel=author">Gabor Szabo</a><br /><img src="/img/szabgab.png"  />
Traduzido por <a href=”www.leprevost.com.br”> Felipe da Veiga Leprevost </a> <br /> <img src=”” />
</p>

