=title Arrays en Perl
=timestamp 2013-08-23T20:45:02
=indexes @, array, arrays, length, size, foreach, Data::Dumper, scalar, push, pop, shift
=status show
=original perl-arrays
=books beginner_book
=author szabgab
=translator DavidEGx
=archive 1
=comments 1
=social 1

=abstract start

En este episodio de <a href="/perl-tutorial">Perl Tutorial</a> echaremos un vistazo a los <b>arrays en Perl</b>.
Esto es un pequeño resumen de como funcionan los arrays en Perl. Veremos explicaciones más detalladas más adelante.

Los nombres de variables que contienen arrays en Perl empiezan con el carácter <hl>@</hl>.

Debido a nuestra insistencia del uso de <hl>strict</hl> tendrás que declarar estas variables usando <hl>my</hl>
antes del primer uso.

=abstract end

Recuerda que todos los ejemplos asumen que tu fichero comieza con

<code lang="perl">
use strict;
use warnings;
use 5.010;
</code>

Declarar un array:

<code lang="perl">
my @names;
</code>

Declare and assign values:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
</code>


<h2>Debugging of an array</h2>

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = ("Foo", "Bar", "Baz");
say Dumper \@names;
</code>

The output is:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>foreach loop and perl arrays</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $n (@names) {
  say $n;
}
</code>

will print:

<code>
Foo
Bar
Baz
</code>

<h2>Accessing an element of an array</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $names[0];
</code>

Note, when accessing a single element of an array the leading sigil changes from <hl>@</hl> to <hl>$</hl>.
This might cause confusion to some people, but if you think about it, it is quite obvious why.

<hl>@</hl> marks plural and <hl>$</hl> marks singular. When accessing a single element
of an array it behaves just as a regular scalar variable.

<h2>Indexing array</h2>

The indexes of an array start from 0. The largest index is always in the variable called
<hl>$#name_of_the_array</hl>. So

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $#names;
</code>

Will print 2 because the indexes are 0,1 and 2.

<h2>Length or size of an array</h2>

In Perl there is no special function to fetch the size of an array, but there
are several ways to obtain that value. For one, the size of the array is one more
than the largest index. In the above case <hl>$#names+1</hl> is the <b>size</b> or
<b>length</b> of the array.

In addition the <hl>scalar</hl> function can be used to to obtain the size of an array:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say scalar @names;
</code>

Will print 3.

The scalar function is sort of a casting function that - among other things - converts an
array to a scalar. Due to an arbitrary, but clever decision this conversion yields the size
of the array.

<h2>Loop on the indexes of an array</h2>

There are cases when looping over the values of an array is not enough.
We might need both the value and the index of that value.
In that case we need to loop over the indexes, and obtain the values using the
indexes:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $i (0 .. $#names) {
  say "$i - $names[$i]";
}
</code>

prints:

<code>
0 - Foo
1 - Bar
2 - Baz
</code>

<h2>Push on Perl array</h2>

<hl>push</hl> appends a new value to the end of the array, extending it:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
push @names, 'Moo';

say Dumper \@names;
</code>

The result is:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz',
        'Moo'
      ];
</code>


<h2>Pop from Perl array</h2>

<hl>pop</hl> fetches the last element from the array:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
my $last_value = pop @names;
say "Last: $last_value";
say Dumper \@names;
</code>

The result is:

<code>
Last: Baz
$VAR1 = [
        'Foo',
        'Bar',
      ];
</code>

<h2>shift the Perl array</h2>

<hl>shift</hl> will return the left most element
of an array and move all the other elements to the left.

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");

my $first_value = shift @names;
say "First: $first_value";
say Dumper \@names;
</code>

The result is:

<code>
First: Foo
$VAR1 = [
        'Bar',
        'Baz',
      ];
</code>

