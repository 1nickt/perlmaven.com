=title Ordenando arrays en Perl
=timestamp 2014-10-21T23:45:56
=indexes sort, $a, $b, cmp, <=>
=status show
=original sorting-arrays-in-perl
=books beginner_book
=author szabgab
=translator davidegx
=archive 1
=comments 1
=social 1

=abstract start

En este articulo veremos como podemos <b>ordenar arrays de strings o números en Perl</b>.

Perl incluye la función <hl>sort</hl> que puede ordenar un array. En su forma más sencilla
le das un array y devolverá los elementos de ese array ordenados. <hl>@sorted = sort @original</hl>.

=abstract end

<h2>Ordenar en ASCII</h2>

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

use Data::Dumper qw(Dumper);

my @words = qw(foo bar zorg moo);

say Dumper \@words;

my @sorted_words = sort @words;

say Dumper \@sorted_words;
</code>

El ejemplo anterior mostrará

<code lang="perl">
$VAR1 = [
        'foo',
        'bar',
        'zorg',
        'moo'
      ];

$VAR1 = [
        'bar',
        'foo',
        'moo',
        'zorg'
      ];
</code>

En primer lugar tenemos el contenido del array antes de ordenarlo, después el contenido en orden.

Este es el caso más sencillo, pero no es siempre lo que queremos.
Por ejemplo, ¿que ocurrirá si algunas de las palabras empiezan con letras en mayúsculas?


<code lang="perl">
my @words = qw(foo bar Zorg moo);
</code>

El resultado en <hl>@sorted_words</hl> será:

<code lang="perl">
$VAR1 = [
        'Zorg',
        'bar',
        'foo',
        'moo'
      ];
</code>

Como puedes ver la palabra que empieza con una letra mayuscula aparece primero.
Esto es porque <hl>sort</hl> ordena por defecto usando la tabla ASCII, ahí todas
las letras mayúsculas aparecen antes que las minúsculas.

<h2>Funciones de comparación</h2>

<hl>sort</hl> funciona en Perl de la siguiente manera: recorre los elementos del array
y en cada turno pone el primer elemento en la variable <hl>$a</hl> y el segundo en la
variable <hl>$b</hl>. Entonces llama a la <b>función de comparación</b>. Esta función
devolverá 1 si el contenido de <hl>$a</hl> debería estar a la izquierda, -1 si el contenido
de <hl>$b</hl> debería estar a la izquierda, o 0 si no importa porque los dos valores son
iguales.

Por defecto no ves esta función de comparación y <b>sort</b> compara los valores usando
la tabla ASCII, pero se puede escribir de forma explicita:

<code lang="perl">
sort { $a cmp $b } @words;
</code>

Este código dará exactamente el mismo resultado que el código sin el bloque: <hl>sort @words</hl>.

Puedes ver que, por defecto, pero usa <hl>cmp</hl> como función de comparación.
Lo que hace cmp es comparar los valores de ambos lados como strings, devuelve 1
el argumento de la izquierda es "menor que" el de la derecha, devuelve -1 si
el argumento de la izquierda es "mayor que" el de la derecha, y devuelve 0 si son
iguales.

<h2>Usando un orden alfabético</h2>

Si quieres usar un orden alfabético, ignorando mayúsculas y minúsculas, puedes hacerlo
así:

<code lang="perl">
my @sorted_words = sort { lc($a) cmp lc($b) } @words;
</code>

Usamos <hl>lc</hl> que devuelve la versión en minúsculas (lower case) del argumento pasado
como parámetro.
Después <hl>cmp</hl> compara estas versiones en minúsculas y decide donde colocar los
strings originales.

El resultado será

<code lang="perl">
$VAR1 = [
        'bar',
        'foo',
        'moo',
        'Zorg'
      ];
</code>

<h2>Ordenando números en Perl</h2>

Si rellenamos un array con números y lo ordenamos usando el orden por
defecto, el resultando no será lo que probablemente estamos esperando.

<code lang="perl">
my @numbers = (14, 3, 12, 2, 23);
my @sorted_numbers = sort @numbers;
say Dumper \@sorted_numbers;
</code>


<code lang="perl">
$VAR1 = [
        12,
        14,
        2,
        23,
        3
      ];
</code>

Por supuesto si lo piensas no es un resultado sorprendente. Cuando la función de comparación
ve 12 y 3 los compara como strings. Por lo tanto en la comparación comparará el
primer carácter de cada cadena, "1" y "3". Como "1" esta antes que "3" en la tabla ASCII
la cadena "12" vendrá antes que la cadena "3".

Perl no adivina mágicamente que quieres ordenar estos valores como números.

De todas formas no hay problema, podemos escribir una función que compare los dos valores como
números.
Para ello usamos el operador <lt><=></li> (también llamado <a href="http://en.wikipedia.org/wiki/Spaceship_operator">spaceship operator (en)</a>)
que comparará sus dos parámetros como números y devolverá 1, -1 o 0.

<code lang="perl">
my @sorted_numbers = sort { $a <=> $b } @numbers;
</code>

Devolverá el contenido ordenado así:

<code lang="perl">
$VAR1 = [
        2,
        3,
        12,
        14,
        23
      ];
</code>

Puedes ver algunos ejemplos extra en <a href="http://perlmaven.com/sorting-mixed-strings">ordenando strings mixtos (en)</a>.

