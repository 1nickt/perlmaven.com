=title Operadores numéricos
=timestamp 2015-03-01T17:30:01
=indexes +, -, *, /, %, ++, --, +=, *=, -=, /=, %=
=status show
=original numerical-operators
=books beginner_book
=author szabgab
=translator davidegx
=comments_disqus_enable 1

=abstract start

Como en la mayoría de lenguajes de programación, Perl tiene los operadores numéricos básicos:
<hl>+</hl> para la suma, <hl>-</hl> para la resta, <hl>*</hl> para la multiplicación, <hl>/</hl> para la división:

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

say 2 + 3;   # 5
say 2 * 3;   # 6
say 9 - 5;   # 4
say 8 / 2;   # 4

say 8 / 3;   # 2.66666666666667
</code>

Perl usa automáticamente números en <a href="https://es.wikipedia.org/wiki/Coma_flotante">coma flotante</a> cuando es necesario, por lo que al dividir
8 entre 3 obtenemos un valor en coma flotante.

El operador modulo <hl>%</hl> devuelve el <a href="https://es.wikipedia.org/wiki/Resto">resto</a> de la división entera:

<code lang="perl">
use strict;
use warnings;
use 5.010;

say 9 % 2;   # 1
say 9 % 5;   # 4
</code>

Estos mismos operadores numéricos se pueden usar sobre <a href="http://perlmaven.com/scalar-variables">variables escalares (es)</a> también:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 2;
my $y = 3;

say $x + $y;  # 5
say $x / $y;  # 0.666666666666667
</code>

<h2>Asignaciones compuestas</h2>

La expresión <hl>$x += 3;</hl> es la versión abreviada de <hl>$x = $x + 3;</hl>, tienen exactamente
el mismo resultado:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 2;
say $x; # 2

$x = $x + 3;
say $x; # 5

my $y = 2;
say $y;  # 2
$y += 3;
say $y;  # 5
</code>

En general, <hl>VARIABLE OP= EXPRESION</hl> es lo mismo que
<hl>VARIABLE = VARIABLE OP EXPRESION</hl>, normalmente es más fácil de leer y menos proclive a errores (No tenemos que repetir el nombre de la VARIABLE)
Puedes usar este tipo de asignación compuesta con cualquier operador binario:

<hl>+=</hl>, <hl>*=</hl>, <hl>-=</hl>, <hl>/=<hl>, incluso <hl>%=</hl>


<h2>Auto incremento y auto decremento</h2>

Perl también proporciona los operadores <hl>++</hl> y <hl>--</hl> para auto incremento y auto decremento. Estos operadores incrementan y decrementan respectivamente el valor de una variable escalar por 1.

  <code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = 2;
say $x; # 2
$x++;
say $x; # 3

$x--;
say $x; # 2
</code>

Tanto las versiones postfijas <hl>$x++</hl> y <hl>$x--</hl>, como las versiones prefijas
<hl>++$x</hl> y <hl>--$x</hl> están disponibles y funcionan de la misma manera que en
otros lenguajes de programación.
En caso de que no los conozcas, no es el mejor momento para explorarlos a fondo.

Cuando se usan dentro de una expresión más grande es cuando usar operadores prefijos o postfijos realmente importa. En
la mayoría de los casos es mejor evitar esas expresiones, pueden provocarte dolores de cabeza fácilmente.
Tendremos un articulo explicando los corto circuitos en expresiones booleanas y los problemas
con auto incrementos.

Adicionalmente, el operador de auto incremento también funciona con strings como se
explica en <a href="http://perlmaven.com//string-operators">string operators (en)</a>.


