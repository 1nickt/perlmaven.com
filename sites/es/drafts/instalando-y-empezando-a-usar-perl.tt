=title Instalando y empezando a usar Perl
=timestamp 2012-08-08T10:45:56
=indexes strict, warnings, say, print, chomp, scalar, $
=tags screencast
=status show
=original installing-perl-and-getting-started
=books beginner_book
=author szabgab
=translator davidegx
=archive 1
=comments 1
=social 1

=abstract start

Esta es la primera parte del <a href="/perl-tutorial">tutorial Perl</a>.

En esta parte aprenderás como instalar Perl en Microsoft Windows y como empezar
a usarlo en Windows, Linux o Mac.

Te daré algunas directrices sobre como configurar tu entorno de desarrollo, en palabras más
sencillas: ¿que editor o IDE usar para escribir Perl?

Veremos el ejemplo estándar "Hola mundo".

=abstract end

<h2>Windows</h2>

Para Windows usaremos <a href="http://dwimperl.com/">DWIM Perl</a>. Es un paquete
que contiene el compilador/interprete de Perl, <a href="http://padre.perlide.org/">Padre, el IDE Perl</a>
y unas cuantas extensiones de CPAN.

Para empezar entra en <a href="http://dwimperl.com/">DWIM Perl</a>
y pincha en el enlance para descargar <b>DWIM Perl para Windows</b>.

Continua, descarga el fichero exe e instalalo en tu sistema. Antes de hacerlo
asegurate de que no tienes ninguna otra versión de Perl instalada.

Varias versiones podrían funcionar en el mismo sistema pero eso requería algunas
explicaciones extra. Así que por ahora mantendremos una única versión de Perl instalda
en tu sistema.

<h2>Linux</h2>

La mayoría de las distribuciones modernas de Linux vienen con una versión reciente de Perl.
De momento usaremos esa versión de Perl. Como editor, puedes instalar Padre que esta incluido
en los sistemas de gestión de paquetes de la mayoría de las distribuciones Linux. Si no es así,
puedes optar por cualquier editor de textos corriente. Gedit es un buen ejemplo de un editor sencillo.
Si estas familiarizado con Vim o Emacs, usa el que prefieras.

<h2>Apple</h2>

Creo que Macs también viene con Perl o lo puedes instalar de forma sencilla a través
de las herramientas estándar de instalación.

<h2>Editor e IDE</h2>

Aunque lo recomiendo, no tienes porque usar el IDE Padre para escribir código Perl.
En la siguiente parte listaré un par de <a href="/perl-editor">editores e IDEs</a> que
puedes usar para programar en Perl. Incluso si usas otro editor recomendaría - para usuarios de
Windows - insalar el anteriormente mencionado paquete DWIM Perl. 

Tiene un montón de extensiones Perl contenidas así que te ahorrará mucho tiempo en el futuro.

<h2>Vídeo</h2>

Si quieres, puedes ver el vídeo
<a href="http://www.youtube.com/watch?v=c3qzmJsR2H0">Hello world en Perl</a>
que he subido a YouTube.  Puede que también quieras echar un ojo a
<a href="http://perlmaven.com/beginner-perl-maven-video-course">Beginner Perl Maven video course (en)</a>.

<h2>Primer programa</h2>

Tu primer programa será similar a:

<code lang="perl">
use 5.010;
use strict;
use warnings;

say "Hola mundo";
</code>

Lo explicaré paso a paso.

<h2>Hola mundo</h2>

Una vez que has instalado Perl DWIM puedes hacer click
en "Inicio -> Todos los programas -> DWIM Perl -> Padre" que abrirá el
editor con un fichero vacío.

Escribe:

<code lang="perl">
print "Hola mundo\n";
</code>

Como puedes ver en Perl las sentencias terminan con un punto y coma <hl>;</hl>.
El simbolo <hl>\n</hl> es usado para indicar una nueva línea.
Las cadenas de texto se encierran entre comillas dobles <hl>"</hl>.
La función <hl>print</hl> muestra un texto en la pantalla.
Cuanto este código se ejecuta perl mostrará el texto con un carácter de nueva línea al final.

Guarda el texto como hola.pl y ejecutalo pinchando "Ejecutar -> Ejecutar script".
Verás una ventana separada mostrando la salida del programa.

¡Enhorabuena!, has escrito tu primer script perl.

Vamos a mejorarlo un poco.

<h2>Perl en la línea de comandos si no usas Padre</h2>

Si no estas usando Padre o algún otro <a href="/perl-editor">IDE</a>
no podrás ejecutar el tu script desde el mismo editor. Al menos no por defecto.
Necesitarás abrir un terminal, moverte al directorio donde guardaste hola.pl
y escribir:

<hl>perl hola.pl</hl>

Así es como ejecutas un script perl desde la línea de comandos.

<h2>say() en lugar de print()</h2>

Vamos a mejorar un poco nuestro pequeño programa:

Primero indicaremos la versión minima de Perl que queremos usar:

<code lang="perl">
use 5.010;
print "Hola mundo\n";
</code>

Una ve que lo has escrito puedes ejecutarlo de nuevo mediante
"Ejecuar -> Ejecutar script" o pulsando <b>F5</b>.
Esto guardará el programa automáticamente antes de ejecutarlo

Generalmente es una buena práctica indicar cual es la minima versión de perl que tu código necesita.

En este caso además añade algunas nuevas caracteristicas de perl incluyendo la palabra reservada
<hl>say</hl>.
<hl>say</hl> es similar a <hl>print</hl>, pero añade automáticamente el carácter de
nueva línea al final, y además es más corto.

Puedes cambiar tu código así:

<code lang="perl">
use 5.010;
say "Hola mundo";
</code>

Cambiando <hl>print</hl> por <hl>say</hl> eliminando <hl>\n</hl> del final del texto.

Probalemente tengas instaladas las versiones 5.12.3 o 5.14.
La mayoría de las distribuciones modernas de Linux vienen al menos con la versión 5.10.

Lamentablemente hay sitios usando versiones anteriores de perl.
En estos casos no podrás usar <hl>say()</hl> y puede que tengas que hacer
pequeños cambios en ejemplos posteriores. Indicaré en que momentos uso
caracteristicas que requieren la versión 5.10.

<h2>Red de seguridad</h2>

En todos los scripts recomiendo encarecidamente hacer algunos cambios al comportamiento
de Perl. Para ello añadimos 2 líneas con sendos pragmas, un concepto muy similar a los flags
en compiladores en otros lenguajes:

<code lang="perl">
use 5.010;
use strict;
use warnings;

say "Hola mundo";
</code>

En esto caso el uso de la palabra reservada <hl>use</hl> le indica a perl
que tiene que cargar y habilitar estos pragmas.

<hl>strict</hl> y <hl>warnings</hl> ayudarán a encontrar algunos errores
frecuentes en tu código y en algunos casos evitarán que los cometas.
Son muy utiles.

<h2>Entrada procedente del usuario</h2>

Ahora vamos a mejorar nuestro ejemplo pidiendo al usuario su nombre
y lo incluiremos en la respuesta.

<code lang="perl">
use 5.010;
use strict;
use warnings;

say "¿Como te llamas? ";
my $name = <STDIN>;
say "Hola $name, ¿como estas?";
</code>

<hl>$name</hl> es una variable escalar.

Las variables se declaran usando la palabra reservada <b>my</b>.
(Este es uno de los requerimientos que añade el uso de <hl>strict</hl>.)

Scalar variables always start with a <hl>$</hl> sign.
The &lt;STDIN&gt; is the tool to read a line from the keyboard.

Type in the above and run it by pressing F5.

It will ask for your name. Type in your name and press ENTER to let perl know
you have finished typing in your name.

You will notice that the output is a bit broken: The comma after
the name appears on a newline. That's because the ENTER you pressed, when typing in your name,
got into the <hl>$name</hl> variable.

<h2>Getting rid of newlines</h2>

<code lang="perl">
use 5.010;
use strict;
use warnings;

say "What is your name? ";
my $name = <STDIN>;
chomp $name;
say "Hello $name, how are you?";
</code>

It is such a common task in Perl, that there is a special function called <hl>chomp</hl>
to remove the trailing newlines from strings.

<h2>Conclusion</h2>

In every script you write you should <b>always</b> add <hl>use strict;</hl> and <hl>use warnings;</hl>
as the first two statements. It is also very recommended to add <hl>use 5.010;</hl>.

<h2>Exercises</h2>

I promised exercises.

Try the following script:

<code lang="perl">
use strict;
use warnings;
use 5.010;

say "Hello ";
say "World";
</code>

It did not show on one line. Why? How to fix it?

<h2>Exercise 2</h2>

Write a script that asks the user for two numbers, one after the other.
Then prints out the sum of the two numbers.

<h2>What's next?</h2>

The next part of the tutorial is about
<a href="/perl-editor">editors, IDEs and development environment for Perl</a>.

