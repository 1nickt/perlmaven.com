=title 如何更改 @INC 來找到不位在標準目錄的 Perl 模組
=timestamp 2012-07-24T12:45:56
=indexes @INC, use, PERLLIB, PERL5LIB, lib, -I
=status show
=books beginner_book
=author szabgab
=translator H2CHANG
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

當使用不是安裝在標準目錄的模組，我們必須更改 @INC 來讓 Perl 能夠找到他們。有許多不同的方式可以解決不同情形下的問題。

讓我們先來看看這些問題:

=abstract end


<h2>載入你自己寫的 Perl 模組</h2>

你開始建立自己的模組, 叫作 <hl>My::Module</hl>。
你把它存在 <hl>/home/foobar/code/My/Module.pm</hl> 裡。

你的程式腳本像下面這樣：

<code lang="perl">
use strict;
use warnings;

use My::Module;
</code>

但是當你執行這個程式時，你會得到像下面這樣的友善錯誤訊息：

<code>
Can't locate My/Module.pm in @INC (@INC contains:
   /home/foobar/perl5/lib/perl5/x86_64-linux-gnu-thread-multi
   /home/foobar/perl5/lib/perl5
   /etc/perl
   /usr/local/lib/perl/5.12.4
   /usr/local/share/perl/5.12.4
   /usr/lib/perl5 /usr/share/perl5
   /usr/lib/perl/5.12
   /usr/share/perl/5.12
   /usr/local/lib/site_perl
   .).
   BEGIN failed--compilation aborted.
</code>

Perl 無法找到你的模組。

<h2>升級 Perl 模組</h2>

如果你考慮升級一個 CPAN 裡的模組，但是妳又不想要把它安裝在標準目錄裡。首先，你可以把他放在私人目錄中，然後安裝並且試試看是否可以執行。

在這個例子中，你把這個模組安裝在私人目錄中，e.g. in  /home/foobar/code，並且你想要 Perl 是找尋到這個新的模組，而不是安裝在系統中舊的模組。

<h2>use 敘述</h2>

當 perl 遇到 <hl>use My::Module;</hl>時，它就去找包含在 <hl>@INC</hl> 陣列中的所有目錄。
它會搜尋是否有子目錄叫作 "My"，如果有，它會繼續在 "My" 裡尋找是否有其中含有 "Module.pm"檔案。

第一個被找到的檔案就會被載入到記憶體中。

如果沒有檔案被找到，那麼就會得到上面的錯誤訊息。

當 perl 被編譯的時候，<hl>@INC</hl> 就被定義好了，它就被嵌入在二進位碼中。我們無法修改它，除非我們重新編譯 perl。但這不是我們想要做的。


幸運的是，當我們在執行程式腳本時，我們有許多方法可以更改 <hl>@INC</hl> 陣列。接下來我們會看到這些解決的方式並且討論哪一種問題適合哪一種解決方式。 

<h2>PERLLIB 和 PERL5LIB</h2>

你可以定義 PERL5LIB 這個環境變數(雖然 PERLLIB 也可以，但是我建議使用 PERL5LIB，因為這樣很清楚知道它是跟 Perl 5 相關。)
每個在這個變數的目錄都會被加到 <hl>@INC</hl>的開頭。

在 <b>Linux/Unix</b> 中使用 <b>Bash</b> 的話, 你可以這樣寫：

<code>
export PERL5LIB=/home/foobar/code
</code>

你可以把它加到 ~/.bashrc 檔案中，這樣每次登入都可以使用。

在 <b>Windows</b>，你可以在命令列中這樣寫：

<code>
set PERL5LIB = c:\path\to\dir
</code>

如果想要一勞永逸來解決的話，請這樣做：

在 <b>我的電腦</b> 按右鍵，然後按 <b>內容</b> 按鈕。

在 <b>系統內容</b> 裡, 按 <b>進階</b> 按鈕。

在進階裡，按 <b>環境變數</b> 按鈕。

在環境變數中，在使用者變數中按下 <b>新增</b> 按鈕，然後輸入：

Variable name: PERL5LIB

Variable value: c:\path\to\dir

接下來按 OK 三次。這樣子 Windows 就增加這個變數了。在命令列中輸入：

<code>
echo %PERL5LIB%
</code>

<hr>

這樣會增加私人目錄 /home/foobar/code directory (或是 c:\path\to\dir directory)
到 <hl>@INC</hl>裡。這樣 <b>每個程式腳本</b> 都在這樣的環境中執行。

在 <b>taint mode</b> 下(之後會在解釋)， PERLLIB 和 PERL5LIB 環境變數會被忽略。

<h2>use lib</h2>

Adding a <hl>use lib</hl> statement to the script will add
the directory to <hl>@INC</hl> for that specific script.
Regardless who and in what environment runs it.

You just have to make sure to have the use lib statement
before trying to load the module:

<code lang="perl">
use lib '/home/foobar/code';
use My::Module;
</code>

One note here. I saw several companies where <hl>use lib</hl>
statements were added to the modules so they will be able to load
their dependencies. I don't think this is good.
I think the right place to change <hl>@INC</hl> is the main
script or even better, outside the script such as in the two other
solutions.

<h2>-I on the command line</h2>

(That's a capital i)

The last solution is the most temporary solution.
Add a <hl>-I /home/foobar/code</hl> flag to perl
when running the script.

<b>perl -I /home/foobar/code  script.pl</b>

This will add /home/foobar/code to the beginning of
@INC <b>for this specific execution</b> of the script.

<h2>So which one to use?</h2>

If you would like to just test a newer version of a module, I'd recommend the command line flag:
<hl>perl -I /path/to/lib</hl>.

If you are installing lots of modules in a private directory then I'd probably use <hl>PERL5LIB</hl>
though we'll also see <hl>local::lib</hl> that does this for you.

<hl>use lib</hl> is used in two cases:

<ol>
<li>When you have a fixed, but not standard company-wide environment
in which you put modules in a common standard location.</li>
<li>When you are developing an application and you'd like to make sure
the script always picks up the modules relative to their own location.
We'll discuss this in another post.</li>
</ol>

<TMPL_INCLUDE name="incl/beginner.tmpl">

