=title Perl orienté objet avec Moose
=timestamp 2013-06-22T23:58:59
=indexes POO, orienté objet, classe, objet, instance, constructeur, accesseurs, modificateurs, attributs, Moose
=status show
=original object-oriented-perl-using-moose
=books advanced_book
=author szabgab
=translator oval
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Dans les prochains articles, nous allons apprendre comment écrire du code orienté objet en Perl.
Nous allons commencer par quelques exemples simples que nous étofferons pas à pas.
Nous commençons à utiliser Moose mais nous apprendrons aussi comment créer des classes par d'autres moyens.

=abstract end

<h2>Un constructeur avec Moose</h2>
<h2>A constructor with Moose</h2>

Commençons par écrire un script simple qui utilise la <b>classe</b> Personne.
Nous ne faisons rien de spécial encore : nous chargeons tout simplement le module et appelons le <b>constructeur</b> pour créer une <b>instance</b>.

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Personne;
my $enseignant = Personne->new();
</code>

Enregistrez ce code le fichier <répertoire_de_base>/bin/app.pl !

Cela ne devrait pas être nouveau pour vous, car je suis sûr que vous avez déjà utilisé d'autres modules de la même façon.
Notre objectif est de savoir comment la classe Personne a été mis implémentée :

<code lang="perl">
package Person;
use Moose;

1;
</code>

Et ... c'est tout !

Ce code est enregistré dans <répertoire_de_base>/lib/ Personne.pm.

Tout ce que vous devez faire pour créer une classe est de créer un package avec le nom de la classe, ajoutez utiliser Moose, à elle, la fin du fichier avec une vraie valeur, et l'enregistrer dans un fichier avec le même nom (sensible à la casse! ) comme le paquet, et avec une extension. h.

All you need to do to create a <hl>class</hl> is to create
a <hl>package</hl> with the name of the class, add <hl>use Moose;</hl> to it,
end the file with a true value, and save it in a file with
the same name (case sensitive!) as the package, and with a .pm extension.

Chargement Moose configure automatiquement utiliser avertissements stricts et d'utilisation. C'est gentil, mais attention vous ne soyez pas tellement habitués à la commodité que vous oubliez dans le code non-Moose.

Loading Moose automatically sets up <hl>use strict</hl> and <hl>use warnings</hl>.
This is nice, but be careful you don't get so used to the convenience that you
forget them in non-Moose code.

Chargement Moose ajoute également automatiquement un constructeur par défaut appelé de nouveau.

Loading Moose also automatically adds a default constructor called <hl>new</hl>.

Comme une note de côté, ce n'est pas une exigence en Perl que le constructeur sera appelé de nouveau, mais dans la plupart des cas, c'est ce que l'auteur choisit de toute façon.

As a side note, it is not a requirement in Perl that the constructor will be called
new, but in most cases that's what the author chooses anyway.

<h2>Attributs et accesseurs</h2>

<h2>Attributes and accessors</h2>

Avoir une classe vide n'est pas très amusant. Allons plus loin dans l'utilisation:

Having an empty class is not much fun. Let's go further in our use:

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Person;
my $teacher = Person->new;

$teacher->name('Joe');
say $teacher->name;
</code>

Dans ce code, après la création de l'objet, nous appelons la méthode "nom" avec une chaîne comme paramètre, ce qui définit l'attribut "name" de la classe comme «Joe». Parce que cette méthode définit l'attribut respectif, il est aussi appelé un setter.

In this code, after creating the <hl>object</hl>, we call the "name" <hl>method</hl>
with a string as a parameter; this sets the "name" <hl>attribute</hl> of the class
to be 'Joe'. Because this method sets the respective attribute it is also called a
<hl>setter</hl>.

Ensuite, nous appelons la même méthode, cette fois sans aucun paramètre. Cela va récupérer la valeur précédemment stockée. Parce que cela devient la valeur ceci est aussi appelé un getter.

Then we call the same method again, this time without any parameter. That will fetch
the value previously stored. Because this gets the value this is also called a
<hl>getter</hl>.

Dans notre cas, le getter et le setter ont le même nom mais ce n'est pas une obligation non plus.

In our case the <hl>getter</hl> and the <hl>setter</hl> have the same name but
it isn't a requirement either.

En général accesseurs sont appelées accesseurs.

In general <hl>getters</hl> and <hl>setters</hl> are called <hl>accessors</hl>.

Le code mise en œuvre de la nouvelle classe est la suivante:

The code implementing the new class is this:

<code lang="perl">
package Person;
use Moose;

has 'name' => (is => 'rw');

1;
</code>

La nouvelle partie, a 'name' => (a => 'rw'); dit :

The new part, <hl>has 'name' => (is => 'rw');</hl> says that 

"La classe Person a un attribut appelé« nom »qui est en lecture et écriture"

"The Person class <hl>has</hl> an attribute called <hl>'name'</hl>
which <hl>is</hl> <hl>r</hl>eadable and <hl>w</hl>riteable"

Ceci crée automatiquement une méthode appelée "nom" qui devient à la fois un setter (pour l'écriture) et un getter (pour la lecture).

This automatically creates a method called "name" which becomes both a setter (for writing)
and a getter (for reading).

<h2>Essayez le code</h2>
<h2>Try the code</h2>

Afin d'essayer cela crée un répertoire nommé "repertoire", avec un sous-répertoire appelé "lib" à l'intérieur, et enregistrez le fichier Person.pm l'intérieur de la "lib" sous-répertoire. Également créer un sous-répertoire nommé "bin" et enregistrer le script appelé là-bas person.pl.

In order to try this create a directory called "somedir", with a subdirectory called
"lib" inside it, and save the Person.pm file inside the "lib" subdirectory.
Also create a subdirectory called "bin" and save the script there called person.pl.

Vous devez avoir :
You should have

<code>
somedir/lib/Person.pm
somedir/bin/person.pl
</code>

Ouvrez votre terminal (ou une fenêtre cmd sur Windows), changer le répertoire d'être dans "repertoire" et tapez perl-ILIB bin / person.pl

Open your terminal (or cmd window on Windows), change the directory to be in "somedir" and
type  <hl>perl -Ilib bin/person.pl</hl>

(Sur MS Windows vous pourriez avoir besoin d'utiliser des back-slash: \)

(On MS Windows you might need to use back-slashes: \ )

<h2>paramètres du constructeur</h2>
<h2>Constructor parameters</h2>

Dans le script suivant, nous passons une paire clé-valeur au constructeur, correspondant au nom de l'attribut et sa valeur.

In the next script we pass a key-value pair to the constructor,
corresponding to the name of the attribute and its value.

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Person;

my $teacher = Person->new( name => 'Joe' );
say $teacher->name;
</code>

Cela fonctionne aussi avec le même module que nous avons déjà:

This works too with the same module as we already have:

En utilisant le constructeur pour définir la valeur initiale d'un attribut de cette façon fonctionne sans apporter de modifications au module de personne elle-même.

Using the constructor to set the initial value of an attribute
in this way works without making any changes to the Person module itself.

Moose accepte automatiquement tous les membres (autre nom pour les attributs) pour être adopté lors de la construction.

Moose automatically accepts every <hl>member</hl> (another name for attributes)
to be passed during construction.
