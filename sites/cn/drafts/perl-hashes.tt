=title 映射表（hashes）  
=timestamp 2013-03-19T11:12:06
=indexes hash, keys, value, associative, %, =>, fat arrow, fat comma
=status show
=books beginner_book
=author szabgab
=translator swuecho
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start


本节<a href="/perl-tutorial">Perl 教程</a> 中，我们学习哈希表<b>hashes</b>。

哈希表<b>hashes</b> 在其他编程语言中，又称做关联数组，词典，或者 映射表？。

它是Perl 中基本的数据结构之一，非常有用。

哈希表是音译，本人认为 映射（表） 是更好的翻译。所以，本文中，用映射（表）。

=abstract end


映射是 键-值对的集合。键是字符串；值是标量，可以是数字，字符串，以及引用。关于引用，我们后面会详细讲解。

映射，也是用<hl>my</hl>关键词来声明。映射的标志符是 <hl>%</hl>。

Some people think that hashed are like arrays (the old name 'associative array' also indicates this, and in some other
languages, such as PHP, there is no difference between arrays and hashes.), but there are two major differences between arrays
and hashes. Arrays are ordered, and you access an element of an array using its numerical index.
Hashes are un-ordered and you access a value using a key which is a string.

Each hash key is associated with a single <b>value</b> and the keys are all unique inside a single hash structure.
That means no repetitive keys are allowed. (If you really, really want to have more than one values for a key,
you'll will need to wait a bit till we reach the references.)

Let's see some code now:

<h2>Create an empty hash</h2>

<code lang="perl">
my %color_of;
</code>

<h2>Insert a key-value pair into a hash</h2>

In this case 'apple' is the key and 'red' is the associated value.

<code lang="perl">
$color_of{'apple'} = 'red';
</code>

You can also use a variable instead of the key and then you don't need to put the
variable in quotes:

<code lang="perl">
my $fruit = 'apple';
$color_of{$fruit} = 'red';
</code>

Actually, if the key is a simple string, you could leave out the quotes even when you use the string directly:

<code lang="perl">
$color_of{apple} = 'red';
</code>

As you can see above, when accessing a specific key-value pair, we used the <hl>$</hl> sign (and not the % sign)
because we are accessing a single value which is a <b>scalar</b>. The key is placed in curly braces.

<h2>Fetch an element of a hash</h2>

Quite similar to the way we inserted an element, we can also fetch the value of an element.

<code lang="perl">
print $color_of{apple};
</code>

If the key does not exist, the hash will return an <a href="/undef-and-defined-in-perl">undef</a>,
and if <hl>warnings</hl> are enabled, as they should be, then we'll get a
<a href="/use-of-uninitialized-value">warning about uninitialized value</a>.

<code lang="perl">
print $color_of{orange};
</code>

Let's a few more key-value pairs to the hash:

<code lang="perl">
$color_of{orange} = "orange";
$color_of{grape} = "purple";
</code>

<h2>Initialize a hash with values</h2>

We could have instantiated the variable with the key-value pairs simultaneous passing to the hash a list of key-value pairs:

<code lang="perl">
my %color_of = (
    "apple"  => "red",
    "orange" => "orange",
    "grape"  => "purple",
);
</code>

<hl>=></hl> is called the <b>fat arrow</b> or <b>fat comma</b>, and it is used to indicate pairs of elements.
The first name, fat arrow, will be clear once we see the the other, thinner arrow (->) used in Perl.
The name fat comma comes from the fact that these arrows are basically the same as commas. So we could have written this too:

<code lang="perl">
my %color_of = (
    "apple",  "red",
    "orange", "orange",
    "grape",  "purple",
);
</code>

Actually, the fat comma allows you to leave out the quotes on the left-hand side makig the code cleaner
and more readable.

<code lang="perl">
my %color_of = (
    apple  => "red",
    orange => "orange",
    grape  => "purple",
);
</code>

<h2>Assignment to a hash element</h2>

Let's see what happens when we assign another value to an existing key:

<code lang="perl">
$color_of{apple} = "green";
print $color_of{apple};     # green
</code>

The assignment changed the value associated with the <b>apple</b> key. Remember, keys are unique and each key has a
single value.

<h2>Iterating over hashes</h2>

In order to access a value in a hash you need to know the key.
When the keys of a hash are not pre-defined values you can use the <hl>keys</hl> function
to get the list of keys. Then you can iterate over those keys:

<code lang="perl">
my @fruits = keys %color_of;
for my $fruit (@fruits) {
    print "The color of '$fruit' is $color_of{$fruit}\n";
}
</code>

You don't even need to use the temporary variable <hl>@fruits</hl>, you can iterate
over directly the return values of the <hl>keys</hl> function:

<code lang="perl">
for my $fruit (keys %color_of) {
    print "The color of '$fruit' is $color_of{$fruit}\n";
}
</code>


<h2>映射的大小</h2>

When we say the size of a hash, usually we mean the number of key-value pairs.
You can get it by placing the <hl>keys</hl> function in scalar context.

映射的大小指的是映射中键-值对的数目。

<code lang="perl">
print scalar keys %hash;
</code>

<h2>致谢</h2>
本文最初是<a href="http://www.leprevost.com.br/">Felipe da Veiga Leprevost</a> 所写，他同时是本教程
<a href="http://br.perl5maven.com/">葡萄牙语</a>的译者。 



