=title perl来帮忙（解析错误日志）
=timestamp 2013-05-04T11:45:56
=indexes parsing
=status show
=original parsing-error-log
=author szabgab
=translator herolee
=index 1
=archive 1
=feed 1
=comments 1
=social 1


=abstract start

今天是2013年1月1日。
通常会做些重大决定、安排整年计划然后绝望地陷入无法实现“新年打算”之中。

相反的，让我们带着本站的真实意图来度过这一天。那就是使用Perl帮助别人。

几天前，我收到一份求救信。我来给大家引述一下，当然不含任何个人信息。

=abstract end

<h2>请求</h2>

我正学着如何使用perl处理各种类型的文件。
我会用Pascal、C或者VBA来做，但是目前还不知道怎么用perl高效地实现。

以下这些行来自一个错误日志：

<code>
================================================================
SOURCE LINE   00347
&N 77_F1_SOE_FREE
              ^
NOT A VALID NAME

SOURCE LINE   00390
&N SCAN_TIME_S
              ^
NOT A VALID NAME

SOURCE LINE   00433
&N XMIT_FAIL_TD
              ^
NOT A VALID NAME
==========     ERRORS  ON  ENTITY    77CF1007      ===========

SOURCE LINE   00482
ASSOCDSP = ""
             ^
MISSING QUOTE

SOURCE LINE   00483
$CDETAIL = ""
             ^
MISSING QUOTE

SOURCE LINE   00488
PRIMMOD = -
          ^
NOT A VALID NAME

SOURCE LINE   00489
PLCADDR = 33003
^
NAMED ITEM DOESN'T EXIST

SOURCE LINE   00490
PVHCAR   = LINEAR
^        ^ ^
NAMED ITEM DOESN'T EXIST
NAMED ITEM DOESN'T EXIST
NAMED ITEM DOESN'T EXIST

SOURCE LINE   00515
CCSRC = 0
^
NAMED ITEM DOESN'T EXIST
"MODNUM   "
MISSING DATA
"PVSRCOPT "
INVALID ENTRY
"$AUXUNIT "
INVALID ENTRY
==========     ERRORS  ON  ENTITY    77CF1008      ===========

SOURCE LINE   00525
ASSOCDSP = ""
             ^
MISSING QUOTE

SOURCE LINE   00526
$CDETAIL = ""
             ^
MISSING QUOTE

SOURCE LINE   00531
PRIMMOD = -
          ^
NOT A VALID NAME

SOURCE LINE   00532
PLCADDR = 33004
^
NAMED ITEM DOESN'T EXIST

SOURCE LINE   00533
PVHCAR   = LINEAR
^        ^ ^
NAMED ITEM DOESN'T EXIST
NAMED ITEM DOESN'T EXIST
NAMED ITEM DOESN'T EXIST

SOURCE LINE   00558
CCSRC = 0
^
NAMED ITEM DOESN'T EXIST
"MODNUM   "
MISSING DATA
"PVSRCOPT "
INVALID ENTRY
"$AUXUNIT "
INVALID ENTRY

========================================================
</code>

第一行表明原始文件哪一行有错。
第二行以&N开头表明哪条记录（关键字字段）包含错误。
第三行表明这是那种错误。

你怎么用perl处理这个文件呢？

十分感谢，
Foo

<h2>CPAN上有这种解析器么？</h2>

我不知道这是什么格式的，不过我觉得Foo应该知道。
因此我首先想到的是看看<a href="http://metacpan.org/">CPAN</a>上是否已经有了某个模块，可以解析这种文件了。

要是找不到，我就得开始思考如何自己解析它。

<h2>尝试理解问题</h2>

我当时忙于修改一些其他的东西，耽搁了几天之后，我读了电子邮件并开始思考他的真实意图是什么？
除了学习Perl之外，Foo想从这个文件解析出什么东西？

我回了封邮件还在等候他的澄清，不过可以先看一下我们能做些什么。

我觉得===这类位于顶部和底部的行只是用于分割实际数据和邮件内容。
我把这两行之间的数据保存成一个文件，叫做error.log。此后，我会处理这个文件。

<h3>Entities</h3>

我发现文件被这些行分成了一些实体：

==========     ERRORS  ON  ENTITY    77CF1008      ===========

第一部分没有这个标题，我估计可能是在我拿到的片段里遗漏了，或者是这个实体真的可能就没这种标题。也可能这部分根本就没有标题。

没有进一步说明的情况下，我假定这是实体名字，而且有一类通用的实体根本就没有名字。

<h2>Blocks</h2>

如邮件所说，第一行指出行号，下一行以&N开头指出记录，第三行是错误内容。
看了例子之后，我可以找到这三行，但我发现错误文本在第四行，第三行有个补字符号，可能用于表明在一行里的位置。

<code>
SOURCE LINE   00347
&N 77_F1_SOE_FREE
              ^
NOT A VALID NAME
</code>

That would be fine, but I see other blocks as well.
For example in this block, there is no &N on the second line, and there are 3 rows with error messages.
(and 3 carets on the 3rd line).

<code>
SOURCE LINE   00490
PVHCAR   = LINEAR
^        ^ ^
NAMED ITEM DOESN'T EXIST
NAMED ITEM DOESN'T EXIST
NAMED ITEM DOESN'T EXIST
</code>

In order to make it easier to write about this, I'll call a set of lines a <b>block</b> if they start with the
expression "SOURCE LINE" and finish when the next block starts. Actually, a block can also end by the
header of a new entity or by the end of the file. So we'll need to handle these special cases.

<h2>What can be extracted?</h2>

I can think of various things that can be extracted from such file:

How many (error) blocks were in each entity and in total?

Which error messages appeared and how frequently?

<h2>Processing the file - first step</h2>

Usually in Perl we read files line-by-line. Especially as we don't know how big the files are. Maybe the file
is bigger than the available memory in the computer? We cannot assume to be able to read the whole file
into memory. So we read line-by-line.

The problem is, that in this case, we need to process a block that holds information from several lines as one unit.
Furthermore we only notice that the block has finished when a new block starts or when a new entity starts
or when the file ends.

So we better keep all the information from a block in memory.

We also keep the statics we collect in memory. Usually a hash can be very useful for this.

We start with the usual boiler-plate code.

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;
</code>

Then we add the code that gets the name of the error file from the command line.
If the file is not given, we throw an exception and ask the user to supply a filename.

<code lang="perl">
my $filename = shift or die "Usage: $0 error.log\n";
</code>

Then we open the file and use a while-loop to read it line-by-line and
remove the trailing newlines using <b>chomp</b>.
For now we just print out the current line using the <b>say</b> function.

We wrap the whole thing in a subroutine called process, to make the
code more reusable.

<code lang="perl">
process($filename);

sub process {
    my ($file) = @_;

    open my $fh, '<', $file or die "Could not open '$file' $!";
    while (my $line = <$fh>) {
        chomp $line;
        say $line;
    }
}
</code>

We can already put together this part of the script, so you can try it:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

my $filename = shift or die "Usage: $0 error.log\n";

process($filename);

sub process {
    my ($file) = @_;

    open my $fh, '<', $file or die "Could not open '$file' $!";
    while (my $line = <$fh>) {
        chomp $line;
        say $line;
    }
}
</code>

<h2>Parsing and recognizing lines</h2>

Now we need to focus on recognizing the different special lines.
For this we'll use <b>regular expressions</b>.

<h3>Entity headers</h3>

We need to recognize if we are at an entity header line.
Let's replace the <hl>say $line;</hl> with the following code.

<code lang="perl">
    if ($line =~ /^=+ \s+ ERRORS \s+ ON \s+ ENTITY  \s+  (\w+) \s+ =+$/x) {
        $entity = $1;
        say $entity;
        say $line;
        next;
    }
</code>

Here we added the <b>x</b> character at the end of the <b>regex</b> so we can use
the extended syntax. This means we can have spaces in the regex to improve readability.

The part between the two slashes <b>/</b> is the regex. The caret <b>^</b>
at the beginning, and the dollar sign <b>$</b> at the end ensure that we describe the whole string.

<hl>=+</hl> matches one or more equal signs.

<hl>\s+</hl> matches one or more white-space characters.

<hl>(\w+)</hl> matches one or more word characters (letters, numbers and underscore). The parentheses will
capture this string and put it in the special variable <hl>$1</hl>.

We also save the current entity in a global variable.

<h3>Block headers</h3>

<code lang="perl">
    if ($line =~ /^SOURCE \s+ LINE \s+ (\d+)$/x) {
        $block = $1;
        say $block;
        say $line;
        next;
    }
</code>

Similar to the case of the section heads, except that <hl>\d</hl> will only match digits.

<h3>Record names</h3>

Record names are marked with a leading &N.

<code lang="perl">
    if ($line =~ /^&N \s+(\w+)$/x) {
        $record = $1;
        say $record;
        say $line;
        next;
    }
</code>

<h3>Lines to discard</h3>

We'll probably want to discard any empty lines, and all the lines that only have carets in them.
We call <hl>next</hl> to read the next line from the file.

<code lang="perl">
    if ($line =~ /^[ ^]*$/) {
        say $line;
        next;
    }
</code>


We assume that every remaining line describes an error. We save them in an array.

<code lang="perl">
    push @errors, $line;
</code>

So far this is what we have:
<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

my $filename = shift or die "Usage: $0 error.log\n";
process($filename);

my $entity;
my $block;
my $record;
my @errors;

sub process {
    my ($file) = @_;


    open my $fh, '<', $file or die "Could not open '$file' $!";
    while (my $line = <$fh>) {
        chomp $line;
        #say $line;
        if ($line =~ /^=+ \s+ ERRORS \s+ ON \s+ ENTITY  \s+  (\w+) \s+ =+$/x) {
            $entity = $1;
            #say $line;
            next;
        }
        if ($line =~ /^SOURCE \s+ LINE \s+ (\d+)$/x) {
            $block = $1;
            #say $line;
            next;
        }
        if ($line =~ /^&N \s+(\w+)$/x) {
            $record = $1;
            #say $line;
            next;
        }
        if ($line =~ /^[ ^]*$/) {
            #say $line;
            next;
        }
        push @errors, $line;
    }

    return;
}
</code>


<h2>Processing a block</h2>

When a block ends we need to process the collected information and  clean up the global variables
so that we won't have values collected in on one block show up in another block.
For this we create a new subroutine called process_block. We will need to call it in 3 places
as described above.

Inside the subroutine, the first thing we do is checking whether we have already collected information
for a block. This way we won't need to write special cases in the code processing the lines.

Then we fill two hashes for counting the number of blocks per entry and for counting the
number of cases for each error. The second does not need any special treatment, but the first
has a special case. As we discussed, there might be blocks before the first entity declaration.
In those cases the $entity variable will be <hl>undef</hl> that would trigger the
warning <a href="http://perl5maven.com/use-of-uninitialized-value">use of uninitialized value</a>.

For this to work well, we either need count those blocks in a separate variable, or we need to
use a special default entry name. I chose the latter and assigned '_DEFAULT_' to the $entry
variable at its declaration.

In the last part, we remove the values from the global variables.

<code lang="perl">
sub process_block {
    return if not $block;

    $block_count{$entity}++;
    foreach my $err (@errors) {
        $error_messages{$err}++;
    }

    $block = undef;
    $record = undef;
    @errors = ();

    return;
}
</code>


<h2>Reporting</h2>

The last part of code is the reporting. After the process() function finishes, we have two hashes filled with values.
We can go through the keys of each hash, <a href="http://perl5maven.com/sorting-arrays-in-perl">sort</a>
them according to the values and then print the content.

<code lang="perl">
say "\nNumber of blocks in each Entity";
foreach my $bl (reverse sort { $block_count{$a} <=> $block_count{$b} } keys %block_count) {
    printf("%-15s %s\n", $bl, $block_count{$bl});
}
say "\nFrequency of errors";
foreach my $msg (reverse sort { $error_messages{$a} <=> $error_messages{$b} } keys %error_messages) {
    printf("%-25s %s\n", $msg, $error_messages{$msg});
}
</code>

<h2>The whole script</h2>

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

my $filename = shift or die "Usage: $0 error.log\n";

my $entity = '_DEFAULT_';
my $block;
my $record;
my @errors;

my %error_messages;
my %block_count;

process($filename);
say "\nNumber of blocks in each Entity";
foreach my $bl (reverse sort { $block_count{$a} <=> $block_count{$b} } keys %block_count) {
    printf("%-15s %s\n", $bl, $block_count{$bl});
}
say "\nFrequency of errors";
foreach my $msg (reverse sort { $error_messages{$a} <=> $error_messages{$b} } keys %error_messages) {
    printf("%-25s %s\n", $msg, $error_messages{$msg});
}

sub process {
    my ($file) = @_;


    open my $fh, '<', $file or die "Could not open '$file' $!";
    while (my $line = <$fh>) {
        chomp $line;
        #say $line;
        if ($line =~ /^=+ \s+ ERRORS \s+ ON \s+ ENTITY  \s+  (\w+) \s+ =+$/x) {
            process_block();

            $entity = $1;
            #say $line;
            next;
        }
        if ($line =~ /^SOURCE \s+ LINE \s+ (\d+)$/x) {
            process_block();
            $block = $1;
            #say $line;
            next;
        }
        if ($line =~ /^&N \s+(\w+)$/x) {
            $record = $1;
            #say $line;
            next;
        }
        if ($line =~ /^[ ^]*$/) {
            #say $line;
            next;
        }
        push @errors, $line;
    }
    process_block();

    return;
}

sub process_block {
    return if not $block;

    $block_count{$entity}++;
    foreach my $err (@errors) {
        $error_messages{$err}++;
    }

    $block = undef;
    $record = undef;
    @errors = ();

    return;
}
</code>


<h2>The output</h2>

<code>
Number of blocks in each Entity
77CF1008        6
77CF1007        6
_DEFAULT_       3

Frequency of errors
NAMED ITEM DOESN'T EXIST  10
NOT A VALID NAME          5
INVALID ENTRY             4
MISSING QUOTE             4
PRIMMOD = -               2
"$AUXUNIT "               2
PVHCAR   = LINEAR         2
MISSING DATA              2
CCSRC = 0                 2
"PVSRCOPT "               2
"MODNUM   "               2
ASSOCDSP = ""             2
$CDETAIL = ""             2
PLCADDR = 33003           1
PLCADDR = 33004           1
</code>


<h2>Further work</h2>

I am sure further processing could be done on the values.
For example, some of the strings are in quotes. We could remove the quotes.
There seem to be certain key-value pairs in the error code. Those could be
split apart.