=title Filtering values using Perl grep
=timestamp 2012-09-02T18:45:56
=indexes grep, filter, any, List::MoreUtils, <>, glob
=status show
=origin Filtering values using Perl grep
=author szabgab
=translator terrencehan 
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

The internal  function of Perl is a <b>filter</b>. You give it a list of values
and a condition, and it returns a sublist of values that yield true for the given
condition.

内部函数<b>grep</b>是一个<b>过滤器</b>。接收一个列表和一个条件作为参数，并返回使给定条件为真的元素构成的列表。

It is a generalization of the grep or egrep commands we know from UNIX and Linux,
but you don't need to know these commands in order to understand the grep of Perl.

它是UNIX和Linux系统中grep和egrep命令的一般化形式，但是你没有必要为了理解Perl中的grep而了解它们。

=abstract end

<hl>grep</hl>函数有两个参数。一个代码块和一个列表。

For every element of the list, the value is assigned to , the
and then the block is executed. If the return value of the block is <hl>false</hl>, the value
is discarded. If the block returned <hl>true</hl> the value from the list is kept as one
of the return values.

对于列表中的每个元素，它的值会被赋值到<hl>$_</hl>（<a href="/the-default-variable-of-perl">Perl的标量默认值</a>）, 然后执行代码块。如果代码快的返回值是<hl>false</hl>，相应值被丢弃。如果代码块返回值是<hl>true</hl>, 相应值会最为返回值之一。

Pay attention, there is no comma between the block and the second parameter!

注意：代码块和第二个参数间没有逗号！

Let's see a few examples for grep:

看几个grep的列子：
<h2>Filter out small numbers</h2>

<code lang="perl">
my @numbers = qw(8 2 5 3 1 7);
my @big_numbers = grep { $_ > 4 } @numbers;
print "@big_numbers\n";      # (8, 5, 7)
</code>

This grep passes the values that are greater than 4,
filtering out all the values that are not greater than 4.

grep返回大于4的值，过滤掉不大于4的值。


<h2>过滤掉新文件</h2>

<code lang="perl">
my @files = glob "*.log";
my @old_files = grep { -M $_ > 365 } @files;
print join "\n", @old_files;
</code>

<hl>glob "*.log"</hl> will return all the files with a .log extension in the current directory.

<hl>glob "*.log"</hl>会返回当前文件所有.log为扩展名的文件。

<hl>-M $path_to_file</hl> returns the number of days passed since the file was last modified.

<hl>-M $path_to_file</hl> 返回文件最后一次修改至今的天数。

This example filters out the files that have been modified within the last year,
and only let's through files that are at least one year old.

这个例子过滤掉365天内修改的文件，并得到至少存在了一年以上的文件。

<h2>数组中是否包含某个元素?</h2>

Another interesting use of <hl>grep</hl> is to check if an element can be found in an array.
For example, you have a list of names and you would like to know if the given name is in the list?

<hl>grep</hl>另一个有趣的应用是用来检查在数组中是否包含某个元素。例如，你有一个名单，并且想知道给定的名字是否也在其中。

<code lang="perl">
use strict;
use warnings;

my @names = qw(Foo Bar Baz);
my $visitor = <STDIN>;
chomp $visitor;
if (grep { $visitor eq $_ } @names) {
   print "Visitor $visitor is in the guest list\n";
} else {
   print "Visitor $visitor is NOT in the guest list\n";
}
</code>

In this case the grep function was placed in
In SCALAR context <hl>grep</hl> will return the number of elements that went through the filter.
As we are checking if the  equals to the current element this grep
will return the number of times that happens.

在这个例子中，grep函数位于<a href="/scalar-and-list-context-in-perl">标量上下文</a>。在标量上下文中，<hl>grep</hl>返回通过过滤的元素个数。我们检查的条件是<hl>$visitor</hl>是否与当前元素相等，grep则会返回相等的次数。

If that's 0, the expression will evaluate to false, if it is any positive number then it will evaluate to true.

如果返回值是0, 表达式则为false，如果是任何正数，表达式为true。

This solution works, but because it depends on the context it might be unclear to some people.
Let's see another solution using the  function of the
 module.

这种方法可以解决问题，但是因为它牵扯到上下文，可能对一些朋友不是很清晰。来看一下另外一个方案：<a href="https://metacpan.org/module/List::MoreUtils">List::MoreUtils</a>模块的<hl>any</hl>函数。

<h2>有匹配的元素么?</h2>

The <hl>any</hl> function has the same syntax as , accepting a block and a list of values,
but it only returns true or false. True, if the block gives true
for any of the values. False if none of them match.
It also short circuits so on large lists this can be a lot faster.

<hl>any</hl>函数的语法和<hl>grep</hl>一样，传入一个代码快和一个列表，但是仅返回true或false。如果任何值使代码块返回true, 则函数返回true；如果没有匹配值则返回false。在处理过程中还存在短路操作，所以对于规模较大的列表会快一些。

<code lang="perl">
use List::MoreUtils qw(any);
if (any { $visitor eq $_ } @names) {
   print "Visitor $visitor is in the guest list\n";
} else {
   print "Visitor $visitor is NOT in the guest list\n";
}
</code>


<h2>UNIX和Linux的grep?</h2>

简单说明一下：

I mentioned that the build in  function of Perl is a generalization of the UNIX
grep command.

我之前提到过，内建的<hl>grep</hl>函数是UNIX grep命令的一般化实现。

The  filters the lines of a file based on a regular expression.

<b>UNIX grep</b>基于正则表达式过滤一个文件的每行内容。

<b>Perl's grep</b> can filter any list of value based on any condition.

<b>Perl grep</b>可以基于任何条件过滤任何列表。

This Perl code implements a basic version of the UNIX grep:

下面Perl代码是UNIX grep的一个简单的实现版本：

<code lang="perl">
my $regex = shift;
print grep { $_ =~ /$regex/ } <>;
</code>

The first line gets the first argument from the command line which should be a
regular expression. The rest of the command line arguments should be filenames.

第一行从命令行读入一个正则表达式，其它命令行参数应该是文件名。

The diamond operator <hl>&lt;&gt</hl> fetches all the rows from all the
files on the command line.
The grep filters them according to the regular expression. The ones that pass
the filtering are printed.

钻石操作符<hl>&lt;&gt</hl>从所有文件(命令行参数)中提取每一行。grep根据正则式进行过滤。通过过滤的行会打印出来。
<hl>&lt;&gt</hl>

<h2>grep on Windows</h2>

Windows does not come with a grep utility but you can install
one or you can use the same Perl script as above.

Window没有grep程序，不过你可以自己安装一个或者使用上面的Perl脚本。

