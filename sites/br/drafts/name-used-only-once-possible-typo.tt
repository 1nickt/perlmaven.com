=title Name "main::x" used only once: possible typo at ...
=timestamp 2014-09-15T18:27:00
=indexes warnings, strict, possible typo
=status show
=books beginner_book
=author szabgab
=translator leprevost
=archive 1
=comments 1
=social 1

=abstract start

Se você algum dia se deparar com este aviso saiba que está com problemas.

=abstract end

<h2>Atribuição à variáveis</h2>

Atribuir a uma variável e nunca utilizá-la, ou então utilizar uma variável sem ter atribuído a ela algum valor, são atitudes raramente corretas em qualquer linguagem de programação.

Provavelmente o único caso “legítimo” ocorre quando você comete algum erro de digitação, e é assim que você acaba com uma variável que é utilizada apenas uma vez.

Aqui está um exemplo de código onde nós <b>apenas atribuímos algo a uma variável</b> 

<code lang="perl">
use warnings;

$x = 42;
</code>

Isso irá gerar com que um aviso como este:

<code>
Name "main::x" used only once: possible typo at ...
</code>

A parte que se refere ao “main::” e a ausência de $ podem ser um pouco confusas a você.
A parte “main::” é citada porque ela é utilizada por padrão, toda variável no Perl faz parte do namespace “main”. Há diversas coisas que podem ser chamadas “main::x”, mas apenas uma delas possui o símbolo $ no início. Se isto sua um pouco confuso não se preocupe, é confuso sim, mas provavelmente você não irá precisar lidar com isto por muito tempo.


<h2>Apenas recuperando valores</h2>

Se por acaso você acabar utilizando uma variável <b> apenas uma vez</b>

<code lang="perl">
use warnings;

print $x;
</code>

então você verá dois avisos:

<code>
Name "main::x" used only once: possible typo at ...
Use of uninitialized value $x in print at ...
</code>

Um deles é discutido neste artigo, o outro é discutido no tutorial 
<a href="/uso-de-valor-nao-inicializado">Uso de valor não inicializado</a>.

<h2>Qual é o erro?</h2>

Você pode se perguntar.

Apenas imagine alguém utilizando a variável chamada <hl>$l1</hl>. Então depois, você resolve utilizar a mesma variável, mas você escreve <hl>$ll</hl>. Dependendo da sua fonte, elas podem se parecer muito similares.

Ou talvez exista uma variável chamada <hl>$color</hl> mas você é Britânico então automaticamente você digita <hl>$colour</hl>  no lugar.

Ou então você tem uma variável chamada <hl>$number_of_misstakes</hl> e você não perceba o erro de digitação no nome da variável que escreveu e em seguida escreve <hl>$number_of_mistakes</hl>.

Você pegou a ideia.

Se você tiver sorte, cometeu este erro apenas uma vez, mas se não tiver, e acabou utilizando a variável errada mais de uma vez, então este aviso não irá aparecer. Afinal de contas, se você está utilizando a mesma variável mais de uma vez, deve haver um bom motivo.

Então, como você pode evitar isso?

For one, try to avoid variables with ambiguous letters in it and be very
careful when typing variable names.

If you want to solve this for real, just <b>use strict</b>!

<h2>use strict</h2>

As you can see in the above examples, I have not used strict. If I was using it,
then instead of getting a warning about possible typo, I'd get a compile time
error:
<a href="/global-symbol-requires-explicit-package-name">Global symbol requires explicit package name</a>.

That would happen even if you used the incorrect variable more than once.

Then of course there are people who would rush and paste "my" in front of the incorrect
variable, but you are not one of those. are you? You would think about the problem and search till
you find the name of the real variable.

The most common way to see this warning is if you are not using strict.

And then you are in deep trouble.

<h2>Other cases while using strict</h2>

As GlitchMr and an Anonymous commenter pointed out, there are a few other cases:

This code, can also generate it

<code lang="perl">
use strict;
use warnings;

$main::x = 23;
</code>

The warning is: <b>Name "main::x" used only once: possible typo ...</b>

Here at least it is clear where that 'main' comes from, or in
the next example, where the Mister comes from.
(hint: The 'main' and 'Mister' are both package names.
If you are interested, you can see another
<a href="/global-symbol-requires-explicit-package-name">error message, involving missing package names</a>.)
In the next example, the package name is 'Mister'.

<code lang="perl">
use strict;
use warnings;

$Mister::x = 23;
</code>

The warning is <b>Name "Mister::x" used only once: possible typo ...</b>.

The following example too generates the warning. Twice:

<code lang="perl">
use strict;
use warnings;

use List::Util qw/reduce/;
print reduce { $a * $b } 1..6;
</code>

<code>
Name "main::a" used only once: possible typo at ...
Name "main::b" used only once: possible typo at ...
</code>

This happens because <hl>$a</hl> and <hl>$b</hl> are
special variables used in the built-in sort function so
you don't need to declare them, but you are only
using them once here.
(Actually it is unclear to me why this generates the warnings,
while the same code using <b>sort</b> does not, but the
<a href="http://www.perlmonks.org/?node_id=1021888">Perl Monks</a> might know.


