=title Migrating (the Perl Maven site) from Dancer 1 to Dancer2
=timestamp 2014-12-11T12:30:01
=indexes files
=status show
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

The <a href="https://github.com/szabgab/Perl-Maven">Perl Maven</a> site was based
on the <a href="/dancer">Perl Dancer web framework</a>, more specifically
on <a href="https://metacpan.org/pod/Dancer">Dancer</a>, the first major version of the framework.

Dancer has a couple of issues I encountered that caused a lot of headache. I had several choices

<ol>
  <li>Leave Dancer and Write it based on plain <a href="/psgi">PSGI/Plack</a>.</li>
  <li>Abandon Dancer and write in it some other framework such as <a href="/mojolicious">Mojolicious</a> or <a href="/catalyst">Catalyst</a>.</li>
  <li>Fix the issues in Dancer</li>
  <li>Migrate to Dancer2</li>
</ol>

I decided to try to migrate to Dancer 2. This article is (going to be) both a diary of the process,
and hopefully a helping guide to others who would like to make similar migration.

=abstract end

Before we go on, let's first see why leave Dancer 1, and why try to migrate to Dancer 2 instead of any of the other options outlined above?

<h2>Why Migrate to Dancer 2 ?</h2>

In the last couple of days I have spend an enormous time trying to get Dancer do something that it probably cannot do.
Specifically I wanted to create sessions and set cookies conditionally so I can avoid creating thousands of sessions for each request
of each bot visiting the site. (If sessions are enabled, Dancer will create a session just because the <hl>template()</hl> function is called to render
a page. I <a href="http://lists.preshweb.co.uk/pipermail/dancer-users/2014-December/004199.html">asked about this</a> and the answer was that
it will probably not changed in Dancer 1. (Which is ok, they don't want to break backward compatibility and they don't want to spend a lot of time
on the maintenance version of Dancer.) I tried enable/disable sessions on the fly, but apparently it does not work with the Plack::Builder
deployment example explained <a href="https://metacpan.org/pod/Dancer::Deployment#In-case-you-have-issues-with-Template::Toolkit-on-Dotcloud">here</a>.
I have not even reported this issue because I assume they won't want to work much on the now maintenance version of Dancer.

Another thing I wanted to do is to configure the session_domain based on the current request and some configuration option.
Dancer, by default, sets the cookie for the exact hostname of the request so visiting <a href="http://ru.perlmaven.com/">ru.perlmaven.com</a>
and <a href="http://br.perlmaven.com/">br.perlmaven.com</a> would (and used to) yield two cookies. I could change this by setting the
<hl>session_domain</hl> option in the configuration file, but as I want to make the application available to host other sites as well,
I wanted this to be configured on-the-fly. I could not do this either.

I could try to delve into the source code of Dancer to try to fix these, but do I really want to invest my time and energy in that?
Would they even accept fixes for these issues? I have not seen a lot of Development on Dancer recently.

So I arrived to the conclusion that I need to abandon Dancer and find an alternative.

<h3>PSGI/Plack</h3>

I could rewrite the application in <a href="/psgi">raw PSGI/Plack</a>. I have been using it for the
<a href="/search-cpan-org">search.cpan.org cloning project</a> and in another project. It is fun, but as I could see from
these projects I have been reinventing certain parts of Dancer. Specifically I already had a <hl>template()</hl> function and
a route dispatcher which also acted as both a "before" and "after" hook.

This is all fine, but why reinvent the wheel? Will my solution be better? Well, maybe in won't have the same bugs as Dancer has,
but I am sure I'll have plenty of other bugs. After all, Dancer has been developed by many people each one of them being a better
programmer than I am. Even if that was not true, the fact that it has been used by a lot of people means it has been field-tested
by many people. So using raw PSGI/Plack might be a small step forward, but it will also be a big step backward.

<h3>Mojolicious or Catalyst</h3>

Switching to either <a href="/mojolicious">Mojolicious</a> or <a href="/catalyst">Catalyst</a> would required a major rewrite,
and neither of those seem to be more appealing to me than Dancer. In my perception Catalyst is too big for this application,
and Mojolicious feels like a moving target. It might be fun, but I want to spend my time on serving my customers and not running
after the changes in the framework I use.

<h3>Fix the issues in Dancer 1</h3>

This would certainly be a very good option. Maybe this would require the smallest additional work from me, but because Dancer 1
is in maintenance mode it will be probably harder to get changes in the code-base, and there will be fewer people willing to
improve it. Most importantly, it feels like a waste of time. Eventually the core Dancer developers will all move to Dancer 2
and I will either use an abandoned version of the framework, or will have to migrate to Dancer 2 anyway.

<h3>Migrating to Dancer 2</h3>

While I hear encouraging words from Sawyer and the <a href="http://advent.perldancer.org/2014">2014 Perl Dancer Advent calendar</a>
is full of optimism with Dancer 2, I have not actually seen any application written in Dancer 2 yet, and I have not heard
about any company that have migrated to Dancer 2 either.

I am sure there will be issues. Probably a lot more issues than Dancer has currently, but it is being developed.
So probably, if I report the bugs, they will be fixed much sooner than bugs in Dancer 1.
Even if others don't fix it, it will feel much better to invest time in improving the next version of Dancer,
than the previous one.

So that's it. I am going to start the migration to <a href="https://metacpan.org/pod/Dancer2">Dancer 2</a>,
and I'll record my process here.

I am not sure if this is the best process to do it, but the
<a href="https://metacpan.org/pod/Dancer2::Manual::Migration">Dancer2::Manual::Migration</a>
does not have a clear process how to do it.


<h2>Create a branch for the Dancer 2 migration</h2>

The very first thing was to create a branch called
<a href="https://github.com/szabgab/Perl-Maven/tree/dancer2">dancer2</a> in the
<a href="https://github.com/szabgab/Perl-Maven">GitHub repository</a> of the project.
I'll use that branch for the migration, and I can still make progress with the application
while the migration stabilizes.

I'll keep rebasing it to master as I make progress.

<h2>Update Makefile.PL with the new prerequisites</h2>

The next thing I did was replacing the Dancer requirements by Dancer2 requirements in the <hl>Makefile.PL</hl>
of the project and installing the modules. Besides <a href="https://metacpan.org/pod/Dancer">Dancer</a>,
the only Dancer-related plug I have been using was the <a href="https://metacpan.org/pod/Dancer::Plugin::Passphrase">Dancer::Plugin::Passphrase</a>.

So I changed Dancer to Dancer2 in both of these names and tried to install the respective modules.

I managed to install <a href="https://metacpan.org/pod/Dancer2">Dancer2</a> without any problems, but
installing <a href="https://metacpan.org/pod/Dancer2::Plugin::Passphrase">Dancer2::Plugin::Passphrase</a> failed.
I have <a href="http://lists.preshweb.co.uk/pipermail/dancer-users/2014-December/004212.html">reported it here</a>,
but the response was basically to wait.

Not a good start, but this does not need to totally stop me. I might be able to migrate other parts of the system,
faking that module while I wait for it to be fixed.

Because of this failure, I have commented out the requirement for Dancer2::Plugin::Passphrase.

As I have been using <a href="https://travis-ci.org/">Travis-CI</a> to provide continuous integration for
the <a href="https://github.com/szabgab/Perl-Maven">Perl-Maven</a> code-base, I could use that as place
to see which parts of the code-base need to be updated.

So I pushed out the first change and got the
<a href="https://travis-ci.org/szabgab/Perl-Maven/builds/43599657">first failure report</a> from Travis-CI.

Not to surprisingly, the main (or even the only?) complain was the missing of the Dancer module, when trying
to load the application in various tests scripts.

<h2>use Dancer ':syntax';    to Dancer2</h2>

As the failure reported by travis was the lack of the Dancer module, the next step seemed to be natural to
replace the 

<code lang="perl">
use Dancer ':syntax';
</code>

statement with

<code lang="perl">
use Dancer2;
</code>

statement in the <hl>Perl::Maven</hl> module, and with

<code lang="perl">
use Dancer2 appname => 'Perl::Maven';
</code>

in the <hl>Perl::Maven::Admin</hl>, <hl>Perl::Maven::PayPal</hl>, and <hl>Perl::Maven::WebTools</hl> modules.

In addition, there was a use of the <a href="https://metacpan.org/pod/Dancer::Template::TemplateToolkit">Dancer::Template::TemplateToolkit</a>
module. the actual use might not be necessary any more, but for now, I've replaced it with the used of the Dancer2 version of the same module.

As I can understand from the <a href="https://metacpan.org/pod/Dancer2::Manual::Migration">migration guide</a>, there is no more need
for the <hl>':syntax'</hl> part.

In addition, because the <a href="https://metacpan.org/pod/Dancer2::Plugin::Passphrase">Dancer2::Plugin::Passphrase</a> cannot be installed yet,
I've created a module called <b>Fake</b>, that will mock the behavior of the <hl>passphrase</hl> function. Luckily the API of that function
was very simple. Having this fake version of it will allow me to continue with the migration process and see if I encounter other problems,
even before the Passphrase issue is fixed.

This is <hl>Fake.pm</hl>

<code lang="perl">
package Fake;
use strict;
use warnings;

our $VERSION = '0.11';

use Exporter qw(import);
our @EXPORT_OK = qw(passphrase);

sub passphrase {
	my ($password) = @_;
	return bless { password => $password}, 'Fake';
}

sub generate {
	my ($self) = @_;
	return $self->{password};
}

sub matches {
	my ($self, $password) = @_;
	return $self->{password} eq $password;
}


1;
</code>


then I ran the tests and also committed the changes to see what Travis-CI will tell us.
Even before I got back the results from Travis-CI I ran the tests myself and got the following error message:

<hl>Engine 'template_toolkit' is not supported.</hl>

<h2>Template::Toolkit</h2>

In order to understand what's going on, I created two applications using the
<hl>dancer -a</hl> and the <hl>dancer2 -a</hl> commands and compared the configuration files.

The result of my research is the following:

The "Dancer 1 way" to enable the use of <a href="">Template::Toolkit</a> was to add
the following line to <hl>config.yml</hl>:

<code>
template: "template_toolkit"
</code>

That was enough to get started. The start_tag and end_tag it used were the same as in
the simple template &lt;% and %&gt; respectively.

In the Perl::Maven application we had this:

<code>
template: "template_toolkit"
engines:
  template_toolkit:
    encoding:  'utf8'
    INCLUDE_PATH: 'views'
</code>

(I think that INCLUDE_PATH thing is just a left-over from one of my experiments.)

In Dancer 2 you can also enable Template::Toolkit with the same configuration option:

<code>
template: "template_toolkit"
</code>

that wasn't the issue.

The issue was that in the <hl>engine</hl> configuration option an extra level called
<hl>template</hl> was added.
Now, instead of the above, we need to write:

<code>
template: "template_toolkit"
engines:
  template:
    template_toolkit:
      encoding:  'utf8'
      INCLUDE_PATH: 'views'
</code>

That still does not seem to be enough. As my experiments showed, the default start_tag and end_tag are now [% and %],
(these are the same that Template::Toolkit really uses as defaults), but we have &lt;% and %&gt;
so we need to change the start_tag and end_tag values.

So we got the following section in the configuration file:

<code>
template: "template_toolkit"
engines:
  template:
    template_toolkit:
      encoding:  'utf8'
      INCLUDE_PATH: 'views'
      start_tag: '<%'
      end_tag:   '%>'
</code>

I committed the changes here, but by that time I git  <a href="https://travis-ci.org/szabgab/Perl-Maven/builds/43621897">the report from Travis-CI</a>
and it showed the problem there is still the missing <hl>Dancer.pm</hl> module. Now I started to wonder where else is it loaded that the tests
fail.

It wasn't difficult to find them using <hl>ack 'use Dancer'</hl>. Three of the tests scripts load it directly using
<hl>use Dancer qw(:tests);</hl>.


<h2>Perl::Critic - Dancer2 also implies use strict</h2>

In addition, I noticed that a lot of the tests fail on my system with reports from <a href="https://metacpan.org/pod/Perl::Critic">Perl::Critic</h2>.
Specifically they complain about <hl>Code before strictures are enabled</hl>

The Perl::Maven project has a <a href="https://github.com/szabgab/Perl-Maven/blob/master/.perlcriticrc">.perlcriticrc</a> file in which
we have an entry:

<code>
[TestingAndDebugging::RequireUseStrict]
equivalent_modules = Moo Dancer

[TestingAndDebugging::RequireUseWarnings]
severity = 5
equivalent_modules = Moo Dancer
</code>

This tells Perl::Critic, to accept having <hl>use Moo</hl>, or <hl>use Dancer</hl> instead of having
<hl>use strict;</hl> and <hl>use warnings;</hl>. That's correct, because <hl>use Dancer;</hl> indeed
loads both the <hl>strict</hl> and <hl>warnings</hl> pragma.

The same is true for <hl>use Dancer2</hl> so we also need to tell Perl::Critic to stop complaining.
I added <hl>Dancer2</hl> in the list of <hl>equivalent_modules</hl> for both entries.

With that noise out of the way it is much easier to focus on the real issues.

Which is still having <hl>use Dancer</hl> in some places as the
<a href="https://travis-ci.org/szabgab/Perl-Maven/builds/43621897">Travis report</a> shows.

<h2>use Dancer ':test';</h2>

The next issue I encountered were in some of the test files where I had code like this: (showing only the relevant part)

<code lang="perl">
use Dancer qw(:tests);

Dancer::set( appdir => getcwd() );

is Dancer::config->{'appdir'}, getcwd(), 'appdir';
is Dancer::config->{'mymaven_yml'}, 'config/mymaven.yml', 'mymaven';

use Perl::Maven;

my $app = Dancer::Handler->psgi_app;
</code>

Here Dancer was loaded for testing and the <hl>appdir</hl> was set manuaally using the <hl>Dancer::set</hl> function.
In the next line I checked if the this setting really worked (apparently the result of some failed experiments during the development),
and then checking if the <hl>mymaven_yml</hl> key was found in <hl>config.yml</hl> and loaded properly. Probably these tests are not
important for the application itself, they only check if the testing environment was set up correctly. Then I used the 
<hl>Dancer::Handler->psgi_app</hl> to fetch the PSGI application created by Dancer.
In Dancer2 thise code will be replaced by the following:

<code lang="perl">
use Dancer2;    # importing: set, config

set( appdir => getcwd() );

is config->{'appdir'}, getcwd(), 'appdir';
is config->{'mymaven_yml'}, 'config/mymaven.yml', 'mymaven';

use Perl::Maven;

my $app = Dancer2->psgi_app;
</code>

There is no need to add <hl>:tests</hl> to the use-statement of Dancer2 and it imports both the <hl>set</hl> and the <hl>config</hl> keywords
so I don't need to prefix them any more. (I listed them after the use-statement of Dancer2 in comments just to make it easier for a reader
to locate the source of these keywords.)
Finally, the PSGI application created by Dancer 2 is not returned directly from Dancer2, instead of Dancer::Handler.

<h2>public/ files</h2>

In the <hl>public/</hl> directory of the project there were 4 files that I think are not used by the Perl Maven application:
<hl>404.html, 500.html, dispatch.cgi and dispatch.fcgi</hl>. I don't need to migrate them, but because the scripts load Dancer,
I thought it would be better to get rid of them. So I temporarily switched back to the master branch of the Git repository.
Removed these 4 files there. Ran the tests of the Dancer 1 version of the application and committed the changes.

Then I switched back to the dancer2 branch of the repository and rebased the branch to the new master using  <hl>git rebase master</hl>.

<h2>bin/app.pl</h2>

The <hl>bin/appl.pl</h2> file is mostly used during development. In the Perl::Maven application it used to look like this:

<code lang="perl">
#!/usr/bin/env perl
use Dancer;
use Perl::Maven;
dance;
</code>

Now it looks like this:

<code lang="perl">
#!/usr/bin/env perl
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Perl::Maven;
Perl::Maven->dance;
</code>

It does not load Dancer (nor Dancer2) and so it should have <hl>use strict; use warnings;</hl>.
Not only to satisfy Perl::Critic, but also to save us from some stupid mistake down the road when
we might add some code to this script.

It is also now recommended to <a href="/pro/how-to-add-a-relative-directory-to-inc">change @INC to a relative directory</a>,
and finally, instead of calling the exported <hl>dance</hl> function, now we call the <hl>dance</hl> method.

This still left us with <a href="https://travis-ci.org/szabgab/Perl-Maven/builds/43686362">some errors reported on Travis</a>
that were not clear to me. None of those seemed provided any clue what changed between Dancer 1 and Dancer 2 that caused them.
Luckily now I could launch the application using <hl>perl bin/app.pl</hl> and visit the development web page.
It gave me the following error:

<code>
Error 500 - Internal Server Error

Hook error: Can't use an undefined value as a HASH reference at /Users/gabor/work/Perl-Maven/bin/../lib/Perl/Maven.pm line 202. at /Users/gabor/perl5/perlbrew/perls/perl-5.20.1_WITH_THREADS/lib/site_perl/5.20.1/Dancer2/Core/Role/Hookable.pm line 141.
Powered by Dancer2 0.156001
</code>

It seems the source of this problem is a change how <hl>from_yaml</hl> behaves, but I am not sure if the change in the behavior was intentional and I need to update
my code, or if is a bug in Dancer. I <a href="http://lists.preshweb.co.uk/pipermail/dancer-users/2014-December/004219.html">asked it</a>.

I am currently working on this problem.



<!--
<code lang="perl">
</code>


<code lang="perl">
</code>
-->



