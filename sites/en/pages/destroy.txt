=title The destructor called DESTROY
=timestamp 2021-03-19T07:30:01
=indexes destructor, DESTROY
=status show
=author szabgab
=archive 1
=description Add a destructor to your classes in Perl.
=comments_disqus_enable 0
=show_related 1

=abstract start

When you write Object Oriented Perl code you would create a constructor called <b>new</b> that you need to call explicitly.

You can (optionally) also create a destructor called <b>DESTROY</b> that will be called implicitly when the instance goes out of
scope or otherwise loses its last reference.

=abstract end

<h2>The class</h2>

This is a very simple class-definition. The <b>new</b> method will receive the name of the class as the first parameter and
use <a href="/bless">bless</a> to create a instance of the class.

It also defines a method called <b>DESTROY</b> that will be called when the instance is destroyed.

The interesting thing is that you can define the DESTROY function either as a regular function:

<code>
sub DESTROY {
}
</code>

or even without the <b>sub</b> keyword:

<code>
DESTROY {
}
</code>


<include file="examples/MyZorg.pm">

<h2>Call destructor when leaving scope</h2>

<include file="examples/show_destructor_scope.pl">

Run it like this:

<code>
perl -I. show_destructor_scope.pl
</code>

The output is this:

<code>
Before calling new
Inside new for MyZorg
Instance of: MyZorg=HASH(0x55fa4be06470)
Before leaving scope
DESTROY for: MyZorg=HASH(0x55fa4be06470)
After leaving scope
</code>

<h2>Call destructor when changing variable content</h2>

If we assign some new value to the only variable that refers to this object, then to it is destroyed.

<include file="examples/show_destructor_reset.pl">

Run:

<code>
perl -I. show_destructor_reset.pl
</code>

Output:

<code>
Before calling new
Inside new for MyZorg
Instance of: MyZorg=HASH(0x55a3d0686470)
Before changing variable
DESTROY for: MyZorg=HASH(0x55a3d0686470)
After changing variable
</code>

<h2>Call destructor when program ends</h2>

The destructor is also called when we reach the end of our program.

<include file="examples/show_destructor_eof.pl">

Run:

<code>
perl -I. show_destructor_eof.pl
</code>

Output:


<code>
Before calling new
Inside new for MyZorg
Instance of: MyZorg=HASH(0x5580a0843470)
DESTROY for: MyZorg=HASH(0x5580a0843470)
</code>


<h2>Call destructor before the END blocks</h2>

Perl allows you to create <a href="/end">END</a> blocks (or END functions) that will be called at the very end of running the program.
The END blocks will be called <b>after</b> all the destructor were called.

<include file="examples/show_destructor_end.pl">

Run:

<code>
perl -I. show_destructor_end.pl
</code>

Output:



<code>
Before calling new
Inside new for MyZorg
Instance of: MyZorg=HASH(0x561971eb1470)
DESTROY for: MyZorg=HASH(0x561971eb1470)
END
</code>
