=title How to run the tests of a typical perl module
=timestamp 2013-01-17T14:45:56
=indexes Build.PL, Makefile.PL, dist.ini
=status draft
=author szabgab
=comments_disqus_enable 1

=abstract start

If you'd like to contribute code to a Perl based project - typically a CPAN module - the
first thing you need to make sure is that the tests of the current version all work well on your platform.

=abstract end

<h2>Where are the unit tests of the Perl module?</h2>

Almost all the Perl modules on CPAN have a <hl>t/</hl> directory and in that directory there are files
with .t extension. These files are the tests of the typical Perl project.

In some cases you will find more tests in the subdirectories of <hl>t/</hl>.

In other cases, especially in older modules, you'll find a file called <hl>test.pl</hl> in the root
directory of the distribution.

<h2>The normal workflow of the Perl module development</h2>

There are 4 major packaging systems for Perl. The ones using
<a href="https://metacpan.org/module/Module::Build">Module::Build</a> will have a file called <hl>Build.PL</hl>.
In this case the workflow to run the tests is

<code>
perl Build.PL
perl Build
perl Build test
</code>

<a href="https://metacpan.org/module/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>
and <a href="https://metacpan.org/module/Module::Install">Module::Install</a> both use a file
called Makefile.PL

In this case the flow is:

<code>
perl Makefile.PL
make
make test
</code>

(On MS Windows, it is probably nmake or dmake instead of make.)

<a href="http://dzil.org/">Dist::Zilla</a> can be recognized by the dist.ini file in the root directory.
It needs less ceremony, you only need to type

<code>
dzil test
</code>

well, of course after you've installed all the dependencies.


<h2>More than one packaging system</h2>

Normally only one of the 3 files: <hl>Build.PL</hl>, <hl>Makefile.PL</hl>, or <hl>dist.ini</hl> should be
in the source code repository of every CPAN distribution BUT:

When releasing a distribution Dist::Zilla will create a <hl>Makefile.PL</hl> file. Some developers add this
to their version control system, even though they probably <a href="/dont-keep-generated-files-in-version-control">should not</a>.

Build.PL can generate a Makefile.PL during the release process. Because for a long time Build.PL could not handle itself alone,
many CPAN developers have opted to include this Makefile.PL in the distribution. Unfortunately some of them
have also added these to their version control system, even though they probably <a href="/dont-keep-generated-files-in-version-control">should not</a>.

So if you see both <hl>Build.PL</hl> and <hl>Makefile.PL</hl> then it is probably Build.PL that is the source. The best would be
to talk to the author and to either remove Makefile.PL from the version control, or to switch the whole distribution
to use either Dist::Zilla or one of the Makefile.PL based tools and remove Build.PL from the repository.
Short of doing that, you can look into the Makefile.PL. If it has a comment like this:

<code>
# Note: this file was auto-generated by Module::Build::Compat version 0.4210
</code>

then you can be quite sure it was indeed generated from the Build.PL file.


<h2>Install dependencies</h2>

Normally the Build.PL, the Makefile.PL, or the dist


<h2>TODO</h2>


Ensure no tests are skipped due to lack of installed dependencies.

How to run the tests in the xt/ directory.



