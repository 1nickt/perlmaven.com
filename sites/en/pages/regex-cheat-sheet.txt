=title Perl 5 Regex Cheat sheet
=timestamp 2013-11-15T07:30:01
=indexes ?, +, *, {}
=status draft
=books beginner_book
=author szabgab
=comments_disqus_enable 1

=abstract start

When learning regexes, or when you need to use a feature you have not used yet or don't use often, it
can be quite useful to have a place for quick look-up. I hope this Regex Cheat-sheet will provide such aid for you.

=abstract end

<a href="/introduction-to-regexes-in-perl">Introduction to regexes in Perl</a>

<code>
   a           Just an 'a' character
   .           Any character except new-line
</code>

<h2>Character Classes</h2>

<a href="/regex-character-classes">Regex Character Classes</a> and <a href="/regex-special-character-classes">Special Character classes</a>.

<code>
   [bgh.]      One of the characters listed in the character class b,g,h or . in this case.
   [b-h]       The same as [bcdefgh].
   [a-z]       Lower case Latin letters. 
   [bc-]       The characters b, c or - (dash).
   [^bx]       Complementary character class. Anything except b or x.
   \w          Word characters: [a-zA-Z0-9_].
   \d          Digits: [0-9]
   \s          [\f\t\n\r ] form-feed, tab, newline, carriage return and SPACE
   \W          The complementary of \w: [^\w]
   \D          [^\d]
   \S          [^\s]
   [:class:]   POSIX character classes (alpha, alnum...)
   \p{...}     Unicode definitions (IsAlpha, IsLower, IsHebrew, ...)
   \P{...}     Complementary Unicode character classes.
</code>

<h2>Quantifiers</h2>

<a href="/regex-quantifiers">Regex Quantifiers</a>

<code>
   a?          0-1         'a' characters
   a+          1-infinite  'a' characters
   a*          0-infinite  'a' characters
   a{n,m}      n-m         'a' characters
   a{n,}       n-infinite  'a' characters
   a{n}        n           'a' characters
</code>

<h2>Other</h2>

<code>
   |           Alternation
</code>

<h2>Grouping and capturing</h2>

<code>
   (...)       Grouping and capturing
   \1, \2      Capture buffers during regex matching
   $1, $2      Capture variables after successful matching

   (?:...)     Group without capturing (don't set \1 nor $1)
</code>


<h2>Anchors</h2>

<code>
   ^           Beginning of string (or beginning of line if /m enabled)
   $           End of string (or end of line if /m enabled)
   \A          Beginning of string  
   \Z          End of string (or before new-line)
   \z          End of string
   \b          Word boundary (start-of-word or end-of-word)
</code>

<h2>Modifiers</h2>

<code>
  /m           Change ^ and $ to macth beginning and end of line respectively
  /s           Change . to match new-line as well
  /i           Case insensitive pattern matching
  /x           Extended pattern (disregard white-space, allow comments starting with #)
</code>


<h2>Extended</h2

<code>
  (?#text)             Embedded comment
  (?adlupimsx-imsx)    One or more embedded pattern-match modifiers, to be turned on or off.
  (?:pattern)          Non-capturing group.
  (?|pattern)          Branch test.
  (?=pattern)          A zero-width positive look-ahead assertion.
  (?!pattern)          A zero-width negative look-ahead assertion.
  (?<=pattern)         A zero-width positive look-behind assertion.
  (?<!pattern)         A zero-width negative look-behind assertion.

  (?'NAME'pattern)
  (?<NAME>pattern)     A named capture group.
  \k<NAME>
  \k'NAME'             Named backreference.

  (?{ code })          Zero-width assertion with code execution.
  (??{ code })         A "postponed" regular subexpression with code execution.
</code>


