=title Mocking function to fake environment
=timestamp 2015-05-12T00:30:01
=indexes Test::Mock::Simple, LWP::Simple
=tags screencast
=status show
=books testing
=author szabgab
=comments_disqus_enable 1

=abstract start

How can we test an application that makes calles to some external system, for example needs to access a website or a web-base API?
We can hit the external system for every test-run, but that will probably slow down our testing, might get us banned from the web site,
but maybe most importantly (for the tester), the test will be unreliable. In addition, it will be impossible to test cases when the
external web site returns some error condition.

Let's try a simple example in which we fetch a web page and count specific strings.

=abstract end

<screencast file="/media/videos/mocking-function-to-fake-environment" />

<a href="https://www.youtube.com/watch?v=kwiJttQdtQY">YouTube</a>

More specifically we have a file called <hl>MyWebAPI.pm</hl> with the following code in it:

<code lang="perl">
package MyWebAPI;
use strict;
use warnings;

use LWP::Simple qw(get);

my $URL = 'http://www.dailymail.co.uk/';

sub new {
    return bless {}, shift;
}

sub count_strings {
    my ($self, @strings) = @_;

    my $content = get $URL;

    my %data;
    foreach my $str (@strings) {
        $data{$str} = () = $content =~ /$str/ig;
    }
    return \%data;
}

1;
</code>

This code fetches the content of British <a href="http://www.dailymail.co.uk/">Daily Mail</a> that provides reliable information on the 
status of the world. Once the page is fetched we count how many times given specific strings appear and return the numbers as a reference
to a hash containing <hl>"string" => count</hl> pairs.

<h2>Test life web server</h2>

We can write a test script call <hl>webapi.t</hl> with the following content:

<code lang="perl">
use strict;
use warnings;

use FindBin qw($Bin);
use lib $Bin;

use Test::More;
plan tests => 1;

use MyWebAPI;

my $w = MyWebAPI->new;

is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        'Beyonce'     => 26,
        'Miley Cyrus' => 3,
    };
</code>

We check the relative popularity of Beyonce and Miley Cyrus and as we can see Beyonce is winnint 26 to 3.
If we run this script <hl>perl webapi.t</hl> the output will indicate that everything is ok:

<code>
1..1
ok 1
</code>

Unfortunately the actual content of the website changes and thus the numbers will change. That means our test
will soon break eve though thet actual "application" is still working correctly.

We can solve this by either disregarding the actual number in the result and check only if there was a number.
This will make our test more universal, but weaker. Or, we can replace the content of the web site as returned
by the <hl>get</hl> function of <a href="https://metacpan.org/pod/LWP::Simple">LWP::Simple</a>. 

We have other issues as well. For example how can we test the behaviour of our application in the case when
the Daily Maily web site is down or returns garbage? We could build our fake version of Daily Maily, but it
is probably more simple to fake the <hl>get</hl> function.

That's what we are going to do. We are going to use <a href="https://metacpan.org/pod/Test::Mock::Simple">Test::Mock::Simple</a>
to fake (or mock) the <hl>get</hl> function.

<h2>Mocking the get function</h2>

We load the module using <hl>use Test::Mock::Simple;</hl> and then 
instead of <hl>use MyWebAPI</hl> we load our module to be tested using
<hl>my $mock = Test::Mock::Simple->new(module => 'MyWebAPI');</hl>

then we replace the <hl>get</hl> function imported from LWP::Simple, but an anonymous function we provide,
which will return a simple string:

<code lang="perl">
$mock->add(get => sub {
    return 'Beyonce Beyonce Miley Cyrus';
});
</code>

We also adjusted the values in the expected hash to reflect the string we return. This is the new version of
the test script:

<code lang="perl">
use strict;
use warnings;

use FindBin qw($Bin);
use lib $Bin;

use Test::More;
plan tests => 1;

use Test::Mock::Simple;
my $mock = Test::Mock::Simple->new(module => 'MyWebAPI');

my $w = MyWebAPI->new;

$mock->add(get => sub {
    return 'Beyonce Beyonce Miley Cyrus';
});
is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        'Beyonce'     => 2,
        'Miley Cyrus' => 1,
    };
</code>

<h2>More test cases</h2>

We can now add more test cases, including one when the <hl>get</hl> function returns the empty string. We just have to remember to update the <hl>plan</hl>
as well.

<code lang="perl">
use strict;
use warnings;

use FindBin qw($Bin);
use lib $Bin;

use Test::More;
plan tests => 3;

use Test::Mock::Simple;
my $mock = Test::Mock::Simple->new(module => 'MyWebAPI');

my $w = MyWebAPI->new;

$mock->add(get => sub {
    return 'Beyonce Beyonce Miley Cyrus';
});
is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        'Beyonce'     => 2,
        'Miley Cyrus' => 1,
    };

$mock->add(get => sub {
    return 'Beyonce';
});
is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        Beyonce => 1,
        'Miley Cyrus' => 0,
    };

$mock->add(get => sub {
    return '';
});
is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        Beyonce => 0,
        'Miley Cyrus' => 0,
    };
</code>

<h2>Testing exception</h2>

As a tester I don't know if the <hl>get</hl> function of LWP::Simple would ever throw an exception, but I wonder how would the MyWebAPI module handle it?

I can add the following test case:

<code lang="perl">
$mock->add(get => sub {
    die 'Something went wrong'; 
});
is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        Beyonce => 0,
        'Miley Cyrus' => 0,
    };
</code>

As it can be seen from the result, the MyWebAPI module does not handle such cases. Is this a bug, or is this the correct behavior?
That's beyond the scope of this article, but now at least we know how to check what happens in this extreme case.

<h2>A bug</h2>

What if the web site contains the name "Cyrus Miley" broken in two lines like in the following example?

<code lang="perl">
$mock->add(get => sub {
    return 'Beyonce Miley Cyrus Miley
Cyrus';
});
is_deeply $w->count_strings('Beyonce', 'Miley Cyrus'), 
    {
        Beyonce => 1,
        'Miley Cyrus' => 2,
    };
</code>

Indeed this test fails now:

<code>
1..4
ok 1
ok 2
ok 3
not ok 4
#   Failed test at ../training/pm/examples/mock/webapi.t line 61.
#     Structures begin differing at:
#          $got->{Miley Cyrus} = '1'
#     $expected->{Miley Cyrus} = '2'
# Looks like you failed 1 test of 4.
</code>

We can now update the module fixing this case and we can test it in a controlled environment.

