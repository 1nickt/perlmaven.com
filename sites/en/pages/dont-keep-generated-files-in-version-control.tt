=title Don't keep geerated files in version control
=timestamp 2015-01-17T14:45:56
=indexes Build.PL, Makefile.PL, dist.ini, MANIFEST
=status draft
=author szabgab
=comments_disqus_enable 1

=abstract start

If you write open source code it is very useful to have a public version control system, but it is also
important to remember what not to put in version control. Besides passwords, credit card numbers and other
private information, one should also avoid putting files that are generated by various tool
including the build and release processes.

=abstract end

<h2>Why to exclude generated files?</h2>

Before going to the list of what and the explanation of how, let's see <b>why</b> should we exclude generated files.

One of the values a version control system provides is to make it easy to locate the changes we made. If there are
files that were generated by various tools, those just create noise tha makes it hard to focus on the real changes.

Besides, some of these files might include a timestamp so even if you have not changed anything in the code,
just ran <hl>perl Makefile.PL</hl> you might get these files updated. Adding these changes to the repository would
create a lot of noise.

There are cases when opening a source file for reading will create a temporary file (e.g. vim will create a swap file).
It would be very disturbing to see these files in the repository.

If you use a Mac, and use the Finder to browse the project directory it might create a file called <hl>.DS_Store</hl>
we certainly don't want those to litter the filesystem of other people.

Finally, some of the generated files will be different among operating systems or even architectures of the same
operating system. They might even differ based on what other Perl modules you have installed.

Seeing all those changes in the history will just confuse everyone and will make it hard to focus on the
real changes.
 
<h2>What to exclude</h2>

Now let's go over the files and directories that should <b>NOT</b> be under version control and have some explanation
what is what.

The <hl>blib/</hl> directory (which probably stands for build lib) is where the build process creates a directory structure
that will be installed. In simple perl modules this means copying the <hl>.pm</hl> files from the <hl>lib/</hl> directory
to the <hl>blib/</hl> directory. In more complex cases modified versions of the <hl>.pm</hl> files are placed in the
<hl>blib/</hl> directory. I even remember modules that were creating </hl>.pm</hl> file on-the-fly during the <hl>perl Makefile.PL</hl>.
Other distributions, especially ones that are partially based on XS or C code, will put compiled files in the <hl>blib/</hl>
directory.

<hl>Build</hl> and <hl>Build.bat</hl> are created by <hl>perl Build.PL</hl> and they aid in the release and installation process.
The former is created on *nix systems. The latter on MS Windows. Neither of these need to be kept around or distributed.

<hl>_build/</hl> is also created by <hl>perl Build.PL</hl> and holds seveler files aiding the build process. No need
to keep them or to distribute them.

<hl>/.build/</hl>

<hl>.last_cover_stats</hl>

<hl>Makefile</hl> is created by running <hl>perl Makefile.PL</hl>. It can be very specific to the current system so
it should not be kept in version control or distributed.

<hl>Makefile.old</hl> and <hl>Makefile.bak</hl> are two "backup copies" of the Makefile. Usually none of them is needed.
Certainly they should not be kept around in version control, nor should they be distributed.

<hl>pm_to_blib</hl> is an empty file created by the build process. It is used only to check if any of the source files are
out of date and needs to be rebuilt.

The <hl>cover_db/</hl> directory is creatd by <a href="https://metacpan.org/pod/Devel::Cover">Devel::Cover</a> module when
you generated a test-coverage report.

The <hl>inc/</hl> directory is created by <a href="https://metacpan.org/pod/Module::Install">Module::Install</a>. The content
of this directory should be included in the distribution, but should not be in the version control system. The directory
is created when the developer runs <hl>perl Makefile.PL</hl> and it is used when the user installing the module runs
<hl>perl Makefile.PL</hl>.

<hl>META.yml</hl> and <hl>META.json</hl> both contain computer readable meta-information about the distribution. They
are based on the content of the Makefile.PL, Build.PL, dist.ini and on the content of the modules being distributed.
There are two files for historical reasons. ORigianlly it was just the yml file, now many people also include the json file.
Theoretically the content should be identical, though as far as I know the json file usually contains more details.
Most of the tools, e.g. <a href="https://metacpan.org/">MetaCPAN</a> use the content of these files.
They are generated during the release of the distribution, and they should be included in the distribution,
but becasue they are generated files, they should <b>NOT</b> be under version control.

<hl>MYMETA.json</hl> and <hl>MYMETA.yml</hl> are similar to the META.json and META.yml files but they incorporate the
local specialities of the system where the distribution is currently installed. They are used during the installation process
but because they are site specific they should <b>NOT</b> be included in the distribution, and the should <b>NOT</b>
be under version control.

<hl>nytprof.out</hl> is created by <a href="https://metacpan.org/pod/Devel::NYTProf">Devel::NYTProf</a>, the profiler
many people use. This generated file should not be kept in version control, nor should it be included in the distribution.


If you use <hl>MAINFEST.SKIP</hl> then I'd add <hl>/MANIFEST</hl> to the .gitignore file. 

If you use <hl>vim</hl> for editing file I'd add <hl>*.swp</hl> to ignore  the swap files.

<hl>.tidyall.d/</hl> is a directory created and maintained by <a href="https://metacpan.org/pod/Code::TidyAll">Code::TidyAll</a>.
It is a cache to speed up the perltidy process.

<hl>Distribution-Name-*</hl>
If this is a repository of a distribution that will be released as Distribution-Name-1.02.tar.gz then
the build process is going to create a directory called Distribution-Name-1.02/ and then a
file called Distribution-Name-1.02.tar.gz. None of these should be kept in version control.

<h2>.gitignore for Git users</h2>

While there are a few alternatives, these days most of the people use Git. If you have a Git repository you
can easily tell it which files to ignore. You create a file called <hl>.gitignore</hl> in the root directory
of your repository and then follow the <a href="https://help.github.com/articles/ignoring-files/">instructions on gitignore</a>.
If you'd like to understand more deeply, then you can also read the
<a href="http://git-scm.com/docs/gitignore">explanation about .gitignore</a>.


In <a href="https://github.com/github/gitignore">this repository</a> there is a sample 
<a href="https://github.com/github/gitignore/blob/master/Perl.gitignore">gitignore file for Perl developers</a>
I've repeated here:

<code>
/blib/
/.build/
_build/
cover_db/
inc/
Build
!Build/
Build.bat
.last_cover_stats
/Makefile
/Makefile.old
/MANIFEST.bak
/META.yml
/META.json
/MYMETA.*
nytprof.out
/pm_to_blib
*.o
*.bs
</code>

I'd probably add the following:

<code>
# If MANIFEST.SKIP is used:
/MANIFEST

# Mac Finder generated:
.DS_Store

# vim swap files:
*.swp

# random backup files:
*.bak

# Code::TidyAll Test::Code::TidyAll cache:
/.tidyall.d/
</code>


Some module specific things to be ignored:

<code>
# Dancer puts the session objects in the session directory and the logs in the logs/ directory
/session
/logs
</code>

<h2>for Subversion users</h2>

The SVN Book describes <a href="http://svnbook.red-bean.com/en/1.7/svn.advanced.props.special.ignore.html">how to ignore unversioned files</a>.



