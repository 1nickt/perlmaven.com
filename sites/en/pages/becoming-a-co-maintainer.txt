=title Becoming a co-maintainer of a CPAN-module - the first steps (Pod::Tree 1.17_01, 1.18)
=timestamp 2015-09-14T12:30:01
=indexes Makefile.PL, make, git, Pod::Tree
=status show
=books cpan_co_maintainer
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

I've started to work on a JavaScript module that will parse Perl POD files. Instead of reinventing the wheel
I wanted to take a look at the POD parsing implementations in Perl. I tried to look at some of the
<a href="/pod">POD parsers</a> in Perl, but I mostly saw warnings about strange code.

Ultimately the best would be to have a separate parser that can build a tree from the POD and then
tools that can use that tree to create output in some format.

By its name the <a href="https://metacpan.org/pod/Pod::Tree">Pod::Tree</a> modules seemed like a good candidate,
but it has not been touched for 5 years. So I thought while I read the code and try to understand if I would
like to go in this way, I could also refactor the code and even show the process.

This is the first step.

=abstract end

I got in touch with the author of the module. He told me the module does not have a version control system, but he gave me
<a href="http://pause.perl.org/pause/query?ACTION=pause_04about#add-comaintainer">co-maintainer rights on PAUSE</a>.

The first thing was to download the latest release of this distribution, unzip it, and create a git repository from the source code:

<code>
$ wget https://cpan.metacpan.org/authors/id/S/SW/SWMCD/Pod-Tree-1.17.tar.gz
$ tar xzf Pod-Tree-1.17.tar.gz
$ cd Pod-Tree-1.17/
$ git init
$ git add .
$ git commit -m "import the source of Pod-Tree-1.17 from CPAN"
</code>

Then I created a <a href="https://github.com/szabgab/Pod-Tree">GitHub repository</a> and pushed the code.

<code>
$ git remote add origin git@github.com:szabgab/Pod-Tree.git
$ git push -u origin master
</code>

<a href="https://github.com/szabgab/Pod-Tree/commit/6dc055565dba50b108e30295b1e29253be6e49ad">commit</a>

<h2>Run the existing tests</h2>

Then I wanted to make sure all tests pass:

<code>
$ perl Makefile.PL
$ make
$ make test
</code>

This passed, but then when I ran <hl>git status</hl> I saw it generated lots of new files.

Most of these should probably be in a temporary directory, but before I can make that changes,
I'd like to make sure these files won't be added to the Git repository by mistake.

So I created a <hl>.gitignore</hl> file

<code>
git status > .gitignore
</code>

and edited it to make sure the .gitignore file works properly.
(I had to remove the header and the footer of the listings and the line about .gitignore itself.
I also had to remove the white-spaces in-front of every line.)

<a href="https://github.com/szabgab/Pod-Tree/commit/f1422df61d79a12e3ac5f6af7dfff57005e7e877">commit</a>

<h2>Cleaning the .gitignore file</h2>

Looking at the new <hl>.gitignore</hl> file more closely I can see many of the files have <hl>.act</hl>
extension. I started to wonder if all the <hl>.act</hl> files are generated by the tests.

So first I ran <hl>find . -name "*.act"</hl> to see if it finds the files. It did.

Then I ran

<code>
$ make realclean
</code>

this is supposed to remove all the files created by the make process.

Then I ran <hl>find . -name "*.act"</hl> again. This time it did not find any file.
I ran <hl>git status</hl> again, just t make sure, no traced file was removed.

I could then edit the <hl>.gitignore</hl> file, remove all the entries that ended with <hl>.act</hl>
(but left in the html_act entries). Instead of those I just added <hl>*.act</hl>.

Then to check if this is correct I ran the tests again:

<code>
$ perl Makefile.PL
$ make
$ make test
</code>

and checked Git again:

<code>
$ git status
</code>

There were no untracked file reported. So <hl>*.act</hl> indeed covers a large number of the generated files.

<a href="https://github.com/szabgab/Pod-Tree/commit/b286d07b54a72eb0c7358a790fca14bae0db2c3f">commit</a>


<h2>Add license and repository link to META files</h2>

We have a repository now. The next thing to do is to make sure I can release a new version of the distribution.

It might be strange to some people, but I firmly believe we have to be able to easily release and deploy any software right from the beginning
of its development. Once I had a client with a huge internal product written mostly in Perl. Their problem was that they did not know how to
easily release a new version and thus they were stuck. When I got to them, the first thing I decided to do was to create a
simple way to release and deploy a new version of just a single file. From there I could start to refactor their code-base and
include more and more files in the release. Within a few days after I started to work there the first release was out and deployed.

Actually as I understand the whole <hl>DevOps</hl> movement is some extension of this idea. Bringing the development and the deployment/operations
closer to each other.

Anyway, let's get back to Pod::Tree.

As this is a CPAN module the only thing we need to care regarding deployment is to make sure the module is installable with the
standard CPAN tools. Luckily it was already that way, so I only have to make sure I don't ruin that.

What remains is the need to be able to package the distribution. This is done using

<code>
$ perl Makefile.PL
$ make
$ make test
</code>

followed by

<code>
$ make dist
</code>

That worked and it created <hl>Pod-Tree-1.17.tar.gz</hl>.

That has the same version number as the one on CPAN currently. We need to increase the version number.

For that I've edited the <hl>lib/Pod/Tree.pm</hl> file and changed <hl>$Pod::Tree::VERSION</hl> to be <hl>'1.17_01'</hl>.
That's supposed to be a developer version that, when uploaded, will be tested by the <a href="http://cpantesters.org/">CPAN Testers</a>,
but will not be the default version to be installed by the regular users.

I've also updated the Changes file and included an entry describing the changes of this release.

Then I ran the release cycle again

<code>
$ perl Makefile.PL
$ make
$ make test
$ make dist
</code>

Added <hl>Pod-Tree-*</hl> to <hl>.gitignore</hl> and committed the <a href="https://github.com/szabgab/Pod-Tree/commit/a37d458a2654270bbdfc23f40158406f8e4a1903">changes</a>

Tagged the current version using

<code>
$ git tag -a 1.17_01 -m 1.17_01
</code>

Finally I pushed it out to GitHub:

<code>
$ git push
$ git push --tags
</code>

Once that was done, I've uploaded the new zip file to <a href="http://pause.perl.org/">PAUSE</a> and waited for its e-mail.

Normally PAUSE sends 2 e-mails. The first one, confirming the upload, usually arrives a few seconds after the file was uploaded.
It contains the md5 checksum of the file. We can use that to verify that PAUSE has received the same file we sent.

The second e-mail, well as I've just learned the second e-mail only arrives if this was <b>not</b> a developer release.

In a nutshell, the second e-mail is the result of PAUSE indexing the distribution, but the whole purpose of developer distributions
is to avoid indexing, and thus avoid being the default release to be installed by the CPAN clients.
So no indexing, no e-mail. More problematic for me is that I can't know if I get the co-maintainer rights for all the modules
in the distribution.

<h2>Another release</h2>

In order to check the indexing I had to upload a new version, this time with a production version number.
For this I've set the version number in <hl>lib/Pod/Tree.pm</hl> to 1.18. Added an entry to the <hl>Changes</hl>
file, <a href="https://github.com/szabgab/Pod-Tree/commit/1c773f8ddcbc5ba9f6b351e636b167dfac4292e6">committed</a>
the changes, and ran the release cycle again:

<code>
$ perl Makefile.PL
$ make
$ make test
$ make dist
</code>

This generated <hl>Pod-Tree-1.18.tar.gz</hl> which I uploaded to PAUSE.

I got the first e-mail within a few seconds and the second e-mail after 2 minutes.
The first one, with a subject line <hl>CPAN Upload: S/SZ/SZABGAB/Pod-Tree-1.18.tar.gz</hl> confirmed the upload.
The second one, with a subject line <hl>PAUSE indexer report SZABGAB/Pod-Tree-1.18.tar.gz</hl> confirmed that
the <hl>Status of this distro: OK</hl> and <hl>Status: Successfully indexed</hl>.

<h2>TODO</h2>

Now that we know we can release a new version and that it will be indexed by PAUSE, we can start working on other changes.

Before that, let's create a list of items that need to be done.

<ol>
  <li><a href="/becoming-a-co-maintainer">Becoming a co-maintainer of a CPAN-module - the first steps (Pod::Tree 1.17_01, 1.18)</a> (this article)</li>
  <li>Update the packaging to <a href="/add-meta-data-to-cpan-distribution">include license and link to repository in the META files</a>. Use GitHub as bug tracking. (Pod::Tee 1.19)</li>
  <li>Add <a href="/enable-travis-ci-for-continous-integration">Travis-CI for Continous Integration</a></li>
  <li><a href="/refactoring-tests-to-use-test-more">Refactoring the tests to use Test::More</a> (Pod::Tree 1.20)</li>
  <li><a href="/check-test-coverage-add-compile-tests">Check test coverage - add compile tests</li>
  <li><a href="/run-perl-tidy-to-beautify-the-code">Run Perl::Tidy on the code to make layout unified.</a> Currently there is a mix of tab and spaces.</li>
  <li>Perl::Critic: <a href="/use-path-tiny-instead-of-readfile-and-writefile">use Path::Tiny instead of ReadFile and WriteFile</a></li>
  <li><a href="/use-strict-use-warnings-no-diagnostics">use strict; use warnings; no diagnostics</a></li>
  <li>Perl::Critic: <a href="/move-packages-to-their-own-files">Move packages to their own files</a> - release Pod::Tree 1.21</li>
  <li>Perl::Critic: fix the most important issues it finds and <a href="/enable-test-perl-critic">enable Test::Perl::Critic</a></li>
  <li>Refactor pod and code to <a href="/eliminating-indirect-method-calls">eliminate indirect method calls</a></li>
  <li><a href="/fixing-the-release-adding-version-numbers">Fixing the release, adding a version number (release Pod::Tree 1.22 and 1.23)</a></li>
  <li><a href="/fix-perl-critic-test-failures-reported-by-cpantesters">Fix Perl::Critic test failures reported by CPAN Testers</a></li>
  <li><a href="/consistent-version-numbers-of-modules">Enforce consistent version numbers of Perl all the modules in a distribution</a></li>
  <li><a href="/perl-critic-exclude-policies-fix-others">Perl::Critic exclude some policies - fix others</a> (Pod::Tree 1.24)</li>
  <li><a href="/how-to-declare-requrements">How to declare requirements of a CPAN distribution?</a></li>
  <li><a href="/pro/improve-kwalitee">Check CPANTS (Kwalitee)</a></li>
  <li><a href="/pro/onverting-indirect-calls">Eliminate more of the indirect calls</a></li>

  <li>Make the Changes file standard compliant</li>
  <li>Eliminate extensive <a href="http://perlcritic.tigris.org/ds/viewMessage.do?dsForumId=4230&dsMessageId=3119165">use of short-circuit</a>. For example <hl>is_ok $obj and $node = $obj, last;</hl></li> 
  <li>Write tests to check round-trip and what might be missing from the round-trip regenerating the original POD.</li>
</ol>

