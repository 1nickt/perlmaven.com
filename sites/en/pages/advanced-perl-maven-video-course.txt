=title Advanced Perl Maven video course
=timestamp 2012-07-17T00:03:01
=description Advanced level, online video training course for people who would like to improve their Perl programming skills
=tags video
=status show
=show_right 0
=show_newsletter_form 0
=show_date 0
=author 0
=archive 0
=comments_disqus_enable 0
=show_social 0


This <b>Advanced Perl training course</b>
will allow you to create modules, classes. To write
Object Oriented code in the modern way, using <b>Moose</b>,
and by using only core Perl, manually blessing references.

It is based on many years of experience teaching Perl,
blended with the modern features of Perl and CPAN.

Taking this course will help you maintain existing code and
it will teach you how to use modern Perl tools to write new,
<b>nice and maintainable Perl code</b>.

<h2>Table of Content</h2>

Some of the episodes are already available, some are going to be published later on.
Some require registrations to the <a href="/pro">Perl Maven Pro</a> others can be freely accessed by anyone.
Some include screencasts, others contain just text.

<h2>Libraries and Modules, Packages and Namespaces</h2>

<ol>
  <li><a href="/pro/introduction-to-advanced-perl-course">Introduction to the Advanced Perl Maven course</a></li>
  <li><a href="/pro/perl4-libraries">Perl 4 libraries</a></li>
  <li><a href="/pro/the-problem-with-libraries">The problem with Perl 4-style libraries</a></li>
  <li><a href="/pro/namespaces-and-packages">Namespaces or packages</a></li>
  <li><a href="/pro/modules">Modules</a></li>
  <li><a href="/pro/require-at-inc">How does require find the module to be loaded?</a></li>
  <li><a href="/pro/use-require-import">What is the difference between require and use? What does import do?</a></li>
  <li><a href="/pro/import">Exporting and importing functions easily</a></li>
  <li><a href="/pro/restrict-the-import">Restrict the import by listing the functions to be imported</a></li>
  <li><a href="/pro/on-demand-import">Import on demand</a></li>
  <li><a href="/pro/behind-the-scenes">Behind the scenes</a></li>

  <li>@INC and the namespace hierarchy</li>
  <li><a href="/how-to-create-a-perl-module-for-code-reuse">How to create a Perl Module for code reuse?</a></li>
  <li>Exporting functions automatically</li>
  <li>Packaging modules for distribution</li>
  <li>Writing Unit Tests for Perl Modules</li>
  <li>Exception handling with eval block</li>
  <li>Exception handling with Try::Tiny</li>
  <li>Warnings and errors from the users POV with Carp</li>
  <li>Throwing exceptions with die and with Exception::Class</li>
</ol>


<h2>Using existing modules</h2>
<ol>
  <li>Using standard modules</li>
  <li>Installing modules from CPAN</li>
  <li>Using CPAN modules</li>
</ol>

<h2>References</h2>
<ol>
<li>Introduction to References</li>
  <li>Handling multi-dimensional, complex data structures</li>
  <li>Manipulating Complex Data Structures</li>
  <li>Reference counting</li>
  <li>Debugging data structures</li>
  <li>Anonymous arrays and hashes</li>
  <li>Subroutine references</li>
  <li>Dispatch tables</li>
  <li>Handling memory leak</li>
  <li>Deep copy of data structures</li>
  <li>Static variables</li>
  <li>Closures</li>
  <li>Creating a caching system</li>
  <li>Signal handling</li>
  <li>Handling warnings in the code</li>
  <li>grep, map</li>
  <li>Array and hash slices</li>
  <li>Creating context sensitive functions using wantarray.</li>
  <li>Improving speed by using the Schwartzian transformation</li>
  <li>Anonymous functions</li>
  <li>Memoization</li>
  <li>Data serialization</li>
  <li>Practical use of function references</li>
</ol>

<h2>Packaging modules for distribution</h2>
<ol>
  <li>The directory hierarchy of a CPAN module</li>
  <li>Writing Unit Tests for Perl Modules</li>
  <li>ExtUtils::MakeMaker</li>
  <li>Module::Build</li>
  <li>Module::Install</li>
  <li>Dist::Zilla</li>
</ol>


<h2>Object Oriented Programming in Perl (with and without Moose)</h2>
<ol>
  <li>Constructors and destructors</li>
  <li>Attributes, attribute types (members)</li>
  <li>Create your own type</li>
  <li>Getters/Setters</li>
  <li>Inheritance</li>
  <li>Polymorphism</li>
  <li>Encapsulation</li>
  <li>Singleton</li>
  <li>Destructor (DESTROY)</li>
  <li>OOP: Bless, or what you will see in the wilde</li>
  <li>OOP: Class::Accessor A small scale object oriented system in Perl</li>
  <li>Class methods and Instance methods</li>
  <li>Automatic Class creation</li>
  <li><a href="/object-oriented-perl-using-moose">OOP: Creating a class with Moose</a></li>
  <li>Operator overloading</li>
</ol>

<h2>Object Oriented using Moose</h2>
<ol>
  <li><a href="/pro/moose-constructor">Moose constructor</a></li>
  <li><a href="/pro/moose-test-constructor">Moose: Testing the constructor</a></li>
  <li><a href="/pro/moose-test-setter-getter">Moose test setter getter</a></li>
  <li><a href="/pro/moose-type-constraint">Moose type constraint</a></li>
  <li><a href="/pro/moose-test-type-constraint">Moose testing type constraint</a></li>
  <li><a href="/pro/moose-classes-as-constraints">Moose classes as constraints</a></li>
  <li><a href="/pro/moose-creating-subtypes">Moose creating subtypes</a></li>
  <li><a href="/pro/moose-coerce-to-subtype">Moose coerce to subtype</a></li>
  <!-- see also on the /moose page -->
</ol>

<h2>Some other advanced topics</h2>

<ol>
  <li>Throwing exceptions in Perl</li>
  <li>Catching exceptions in Perl</li>
  <li>Always use strict and warnings</li>
  <li><a href="/variable-declaration-in-perl">Variable declaration in Perl</a></li>
  <li><a href="/symbolic-reference-in-perl">Symbolic references in Perl</a></li>
  <li><a href="/barewords-in-perl">Barewords in Perl</a></li>
  <li><a href="/how-to-capture-and-save-warnings-in-perl">How to handle warnings in an application?</a></li>
  <li><a href="/unknown-warnings-category">Unknown warnings category</a>
  <li>splain and use diagnostics</li>
  <li>Fatal warnings</li>
  <li>Array and hash slices</li>
  <li><a href="/splice-to-slice-and-dice-arrays-in-perl">splice</a></li>
  <li>AUTOLOAD</li>
  <li>BEGIN and END</li>
  <li>Schwartzian transformation</li>
  <li>use autodie</li>
  <li>Perl::Critic</li>
  <li><a href="/avoid-unwanted-bitwise-operators">Avoid unwanted bitwise operators using Perl::Critic</a></li>
  <li>Perl::Tidy</li>
  <li>Saved variable: local</li>
  <li>Who is calling? caller</li>
  <li>Logging with Log::Dispatch</li>
  <li>Time and date with DateTime</li>
  <li><a href="/filtering-values-with-perl-grep">Filtering with grep in Perl</a></li>
  <li><a href="/transforming-a-perl-array-using-map">Transforming a perl array using the map function</a></li>
  <li>Signals and the kill function</li>
  <li><a href="/the-default-variable-of-perl">default scalar variable of Perl</a></li>
</ol>



<!--
  <li><a href=""></a></li>
--

<h2>What do people say?</h2>

<code>
Just watched the Advanced Perl Maven - Online video course by @szabgab.
Fantastic value, great course. ++.
</code>

<a href="http://twitter.com/#!/marksmith">Mark Smith</a>

<code>
@szabgab oh cool thanks! im recommending it to my boss too so
he can better appreciate the work i do :)

@szabgab hah! im also getting it for myself too.. need to fill in the
blanks in my perl knowledge. thanks for making your tutorials available
@szabgab just got all 3 courses! btw i found you through youtube when
i was looking for help using perl Dancer and found your blog tutorial.
</code>

<a href="http://twitter.com/#!/captain_fwiffo">Captain Fwiffo</a>

<!--
By purchasing the video you get unlimited updates as new editions are published!

<table border="1">
<tr><td>What</td><td>Details</td><td>Price</td></tr>
<tr><td>Video course</td><td> 84 screencasts,<br /> a total of more than 2 hours of screencasts<br />+ explanation of
the solutions.</td><td><div class="btn"><a href="http://ude.my/vtoOgj">Buy for $69</a></div></td></tr>
</table>
-->

