=title qw - quote word
=timestamp 2015-03-27T16:30:01
=indexes qw
=status draft
=books beginner_book
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

What is this <hl>qw</hl> I often see in Perl code?

<hl>qw</hl> stands for <b>quote word</b>. It looks like some other operators such as
<a href="/quoted-interpolated-and-escaped-strings-in-perl"><hl>q</hl> and <hl>qq</hl></a>, or 
<a href="/search/qr"><hl>qr</hl></a>, but actually it works more like
<a href="/perl-split">split</a>.

=abstract end

If you want to include a list of strings in your code, for example to initialize an array as in this example:

<code lang="perl">
my @name = ('foo', 'bar', 'zorg');
</code>

Instead of that you can use the <hl>qw</hl> operator:

<code lang="perl">
my @name = qw(foo bar zorg);
</code>

Which is be the same as:

<code lang="perl">
my @name = qw(foo bar    zorg);
</code>

or even

<code lang="perl">
my @name = qw(
    foo
    bar
    zorg
);
</code>

<hl>qw</hl> will take the values provided in the parentheses and split them up where it finds one or more spaces.

So it has the same result as this code:

<code lang="perl">
my @name = split /\s+/,  q(foo bar      zorg);
</code>

Of course, there is no point in using <hl>split</hl> where we can use a <hl>qw</hl>.
(And the split version would give different result if there was a whitespace or newline before the first word.)

<h2>Why is it called quote word?</h2>

As it split the give string on spaces if any of the strings in the original list of strings has a space in it,
we cannot use qw. 

For example this creates a 3 element array:

<code lang="perl">
my @name = ('foo', 'bar', 'zorg morg');
</code>

On the other hand this is going to be a 4-element array:

<code lang="perl">
my @name = qw(foo bar zorg morg);
</code>

So <hl>qw</hl> does not allow spaces in the string as it looks for space-delimitered "words".

On the other hand the "letters" can be any other character.

For example:

<code lang="perl">
my @name = qw(#foo $bar      @zorg);
</code>

Is the same as this:

<code lang="perl">
my @name = ('#foo',  '$bar', '@zorg');
</code>

So you can use any other characters as part of the "words".

<h2>qw is not a function</h2>

Although at first it might look like a function having parentheses after it, but in fact it is not and instead of parentheses we can write other
delimiters as well.

Slashes seem to be popular:

<code lang="perl">
my @name = qw/foo bar zorg/;
</code>

Any of the parentheses can be used:

<code lang="perl">
my @name = qw{foo bar zorg};
my @name = qw[foo bar zorg];
my @name = qw(foo bar zorg);
</code>

Quotes can be used:

<code lang="perl">
my @name = qw'foo bar zorg';
my @name = qw"foo bar zorg";
</code>

Even some other characters can be used:

<code lang="perl">
my @name = qw!foo bar zorg!;
my @name = qw@foo bar zorg@;
</code>

Tough I like to stick to parentheses and I'd recommend you do that too.

<h2>Possible attempt to separate words with commas</h2>

A common mistake when switching from a list of words to a <hl>qw</hl> construct
is forgetting to remove the separating commas between the elements:

<code lang="perl">
my @name = qw(foo, bar, zorg);
</code>

If your code has <a href="/always-use-strict-and-use-warnings">use warnings</a> turned on, as it should, then you'll get
a warning about <hl>Possible attempt to separate words with commas</hl>.


<h2>Importing function selectively</h2>

One of the places where you'll often see the use of <hl>qw</hl> is where modules are loaded.
You might see something like this:

<code lang="perl">
use Module::Name qw/foo $bar/;
</code>

From the above explanation you'll know that this is the same as

<code lang="perl">
use Module::Name ('foo', '$bar');
</code>

This basically means we pass this list as parameters to the
<a href="/pro/use-require-import">import</a> function of <hl>Module::Name</hl>
which will import the 'foo' function and the '$bar' scalar variable into our code.

See also <a href="/pro/on-demand-import">on-demand import</a>, for further explanation.

