=title Always check if the regex was successful
=timestamp 2020-08-30T20:30:01
=indexes $1, =~, regex
=status show
=author szabgab
=archive 1
=description The regular expression capturing variables, $1, $2, $3, ... don't get reset on every regex so before we use them we should verify that the most recent regex matched and we are not using stale data.
=comments_disqus_enable 0
=show_related 1

=abstract start

If you are using regular expression to extract pieces from a string, you should always check if the regex matched
before using the $1, $2, etc. variables that hold the captured substrings.

Otherwise you risk using the results of an older match.

=abstract end

<h2>First bad example</h2>

<include file="examples/regex_in_loop.pl">


In this example we use a regex, but we don't check if it was successful or not. We just assume it was and
use the content of $1. The result:

<code>
abcde
a
12345
a
</code>

This was a very simplified example, and thus running it made it easy to see the problem. For both input strings,
the result was the same, matched by the first string.


<h2>Show when was it matching</h2>


<include file="examples/regex_in_loop_showing_match.pl">

In this example I only wanted to show you that the first string matches, the second string does not. The result:

<code>
abcde
match
a
12345
a
</code>


<h2>Correct way to write it</h2>

<include file="examples/regex_in_loop_corrected.pl">

Finally we moved the use of $1 inside the condition, and used it only when there was a match.

<code>
abcde
match
a
12345
</code>

<h2>Final words</h2>

There are other ways to avoid the problem shown at the beginning, but this might be the most straight forward one.


