=title warning when something goes wrong
=timestamp 2013-07-11T12:45:56
=indexes warn, STDERR
=status draft
=books beginner_book
=author szabgab
=archive 1
=comments 1
=social 1

=abstract start

When something goes slightly wrong in your script/program/application, it is customary to warn
the user about the issue. In command line script this is normally done by printing
a warning message to the <a href="/stdout-stderr-and-redirection">Standard Error channel</a>.

=abstract end

As explained in the article about the <a href="/stdout-stderr-and-redirection">standard output and error</a>,
in Perl you can do it by printing to <hl>STDERR</hl>

<code lang="perl">
print STDERR "Slight problem here...\n";
</code>


There is a better, more standard way though.

you could just call the <hl>warn</hl> function:

<code lang="perl">
warn "Slight problem here.\n";
</code>

It is shorter, more expressive and in the above form has the same effect.

It provides more though.  If you leave out the trailing new-line (the <hl>\n</hl> at the end):

<code lang="perl">
warn "Slight problem here.";
</code>

then the output will include the name of the file and the line number,
where the <hl>warn</hl> function was called:

<code>
Slight problem here. at programing.pl line 5.
</code>

This can be very useful when you have a script that runs a lot of other scripts,
or when you have a bigger application with many modules.
This will make it much easier for you, or for the user of your program,
to track down the source of the problem.

<h2>Catching warnings</h2>

There is even more.

Perl introduced a special signal-handle for warnings.
This means you, or someone else, can later add code to the program that
<a href="/how-to-capture-and-save-warnings-in-perl">captures all the warnings</a>.
This is a bit more advanced topic though, but if you are interested go ahead,
check out that page.

