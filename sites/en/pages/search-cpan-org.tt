=title Building an open source clone of search.cpan.org using MetaCPAN API
=timestamp 2014-10-22T11:30:01
=indexes MetaCPAN
=tags screencast
=status show
=author szabgab
=archive 1
=comments 1
=social 1

=abstract start

This is an attempt to recreate the look-and-feel of <a href="http://search.cpan.org/">search.cpan.org</a>
using the <a href="https://github.com/CPAN-API/cpan-api/">MetaCPAN API</a> as a back-end.
This is the same back-end that powers the fancier <a href="https://metacpan.org/">MetaCPAN</a>.

=abstract end

<screencast file="/media/videos/search-cpan-org" />

If you would like to follow the development of the project, subscribe to the <a href="/pro">Perl Maven Pro</a>.

<h2>Objectives</h2>

This project has a number of objectives:

<ol>
  <li>Some people complain that MetaCPAN.org is too fancy for them and they prefer the look-and-feel of search.cpan.org. On the other hand some of them also complain about bugs and missing features in search.cpan.org. This project can provide them an alternative.</li>
  <li>It will be able to provide a feedback to the MetaCPAN authors for the features that might be still missing in MetaCPAN or in MetaCPAN API.</li>
  <li>This can be an interesting exercise on rebuilding an existing service when you don't have access to its source code, or when you cannot read and understand the source code. (The former being a special case of the latter.)</li>
  <li>This can be an interesting project to follow and explain with <a href="/pro">Perl Maven Pro</a> articles and screencasts. It is like many other rewrite project
      when you already have a working web-site and you have the database behind it, but for some reason you cannot read the source code of the application. Either because it is
      not available to you, or because it is so unreadable that trying to analyze it would take a lot of time.</li>
  <li>A nice exercise in writing tests for an existing project.</li>
  <li>The code behind this project will be open source hosted on <a href="https://github.com/szabgab/MetaCPAN-SCO">GitHub</a></li>
  <li>The project should be an almost exact replica of search.cpan.org. The places where it can differ might be minor bug-fixes and maybe some additional configurable flexibility.</li>
  <li>The code of the project should be extensible so people who might want to create an "improved version of search.cpan.org" can use this as a base without modifying the source code.</li>
  <li>As the project itself, this document can evolve as well. The source code can be found in <a href="https://github.com/szabgab/perlmaven.com">GitHub</a></li>
</ol>

A couple of use-cases I can think of:

<ul>
  <li>If the people running search.cpan.org think this is a good replica of the UI and the service, we might configure this installation to be one of the
      search.cpan.org servers. If that works, then maybe all the servers can be replaced with this code using the MetaCPAN API.</li>
  <li>Alternatively we might be able to add some code to <a href="http://metacpan.org/">MetaCPAN.com</a> that will allow people to opt to use this interface.
      In that case MetaCPAN might automatically show this interface to people who wanted.</li>
  <li>Having an open source version of a search.cpan.org clone will allow people to fix bugs they encounter in search.cpan.org and then use this improved version.
      Even if they use it on their own computer.</li>
</ul>

<h2>Existing UI and features</h2>

The very first thing to do was to create a rough list of pages by type and try to evaluate the complexity of each page.
This list can be later updated and can be used as a sort-of specification.

<ul>
<li>The <a href="http://search.cpan.org/">home page</a> -  mostly static with some numbers at the bottom left corner.
    Later it turned out, these numbers appear on every page.
    </li>
<li><a href="http://search.cpan.org/author/">Authors main index</a> Static. Just a list of the ABC with links.</li>
<li>Authors staring by a <a href="http://search.cpan.org/author/?A">single letter</a>  dynamic (PAUSE ID and full name) could be cached for quite a long time.
    It could also be updated based on the "recent" pages of MetaCPAN. (BTW Is there a way to fetch the recently registered PAUSE authors?)
    </li>
<li>Individual author page - (e.g of <a href="http://search.cpan.org/~aadler/">AADLER</a>  Dynamic.
    Some generic information about the specific author (name, PAUSE ID, email, home page, avatar).
    A list of distributions released by the author (Distribution, abstract, date).<br>
    This list contains the latest of each distribution that was released by the author that is still on CPAN. Specifically: if there is a more recent version
    released by someone else the older version will still show up as long as it is still on CPAN. If it was removed and can only be found on BackPan then
    it will disappear from this list as well.<br>
    This list also includes distributions that are "unauthorized", where the author did not have co-maintainer bit when the distribution was uploaded.
    </li>
<li>Distribution - specific version (e.g. <a href="http://search.cpan.org/~andya/CGI-Simple-1.113/">CGI-Simple-1.113</a>)
    shows various meta data of the distribution, including the list of
    modules included in it. If there is a newer version on CPAN a link to that newer version is also displayed.
    Big red "UNAUTHORIZED RELEASE" text if the author did not have the right to release one or more of the modules in this distribution.
    For example <a href="http://search.cpan.org/~szabgab/Text-MediawikiFormat-1.01/">Text-MediawikiFormat-1.01</a>.<br>
    <b>permalink</b> to a page that always shows the latest authorized release of a distribution.
    Module names link to the modules in the specific version of the distribution: For example
    <a href="http://search.cpan.org/~szabgab/Text-MediawikiFormat-1.01/lib/Text/MediawikiFormat.pm">MediawikiFormat.pm</a>.
    </li>
<li>Distribution - canonical link (<a href="http://search.cpan.org/dist/Text-MediawikiFormat/">Text-MediawikiFormat</a>)
    always showing the latest authorized release.
    It looks exactly the same as the page of a specific version. The module names link to the canonical pages of the modules.
    </li>
<li>Module  - specific version: http://search.cpan.org/~szabgab/Text-MediawikiFormat-1.01/lib/Text/MediawikiFormat.pm
    The POD in simple HTML.
    Numbers from RT: Number of 'New' and 'Open' requests
    syntax highlighting selector at the bottom right
    <b>permalink</b>
    </li>
<li>Module - canonical link (permalink) http://search.cpan.org/dist/CGI-Simple/lib/CGI/Simple.pm
    </li>
<li><a href="http://search.cpan.org/recent">Recent</a> - List of recently uploaded distributions (distribution-version abstract) sorted by date
    </li>
<li>Mirrors - list of available CPAN mirrors. User can select a mirror and then the 'download' links will link to that repository
    instead of cpan.org
    </li>
<li>FAQ - Frequently Asked Questions http://search.cpan.org/faq.html about search.cpan.org (static)
    </li>
<li>Feedback - http://search.cpan.org/feedback (static) how to send feedback to the search.cpan.org developers and where to ask questions about CPAN modules.
    </li>
<li>Search - every page has a search box, and a selector (All/Modules/Distributions/Authors). As far as I can tell each one will restrict the search to
    substrings in the names of the Modules/Distributions/Authors, and 'All' will somehow combine the 3 result sets and even search elsewhere, but I don't understand this perfectly.
    For example searching for <a href="http://search.cpan.org/search?query=sz&mode=author">sz among authors</a> shows only "Arpad Szasz" and does not show "Gabor Szabo"
    and searching for <a href="http://search.cpan.org/search?query=sza&mode=author">sza among authors</a> does not return anything.
    On the other hand <a href="http://search.cpan.org/search?query=sz&mode=all">sz in all</a> also returns <a href="http://search.cpan.org/~cerney/Graphics-VTK-4.0.001/Common/Common.pm">VTKCommon</a>
    where I think sz only appears in the text.
    </li>
</ul>

<h2>Notes</h2>

While having multiple interfaces to the data on CPAN can be a good idea, letting search engines get confused about which is the canonical URL is probably not a good idea.
Hence we are going to set the robots.txt to disallow every well-behaving user-agent.

<h2>Perl Maven Pro</h2>

To follow the development of the project, subscribe to the <a href="/pro">Perl Maven Pro</a>.

