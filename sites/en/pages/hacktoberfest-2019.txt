=title Hacktoberfest 2019 and Perl
=timestamp 2019-09-30T08:00:01
=indexes MetaCPAN
=status show
=books dancer
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

<a href="/digitalocean">Digital Ocean</a>, one of my favorite VPS providers is running its
<a href="https://hacktoberfest.digitalocean.com/">Hacktoberfest</a> again. The goal is to encourage more people
to contribute to Open Source projects.

In a nutshell: After you register on their website you need to send 4 pull-requests to any GitHub hosted project
in October. The first 50,000 people get a cool T-shirt.

So what can you do if you care about Perl?

=abstract end

<ul>
  <li>You can read the <a href="https://www.perl.com/article/hacktoberfest-2019/">Hacktoberfest article</a> on perl.com and follow those suggestions.</li>
  <li>You can fix some stuff in the <a href="https://github.com/szabgab/Perl-Maven">code running the Perl Maven site</a>.</li>
  <li>You can fix issues in the <a href="https://github.com/szabgab/perlmaven.com">content of the Perl Maven site</a>.</li>
  <li>You can help improve the <a href="https://github.com/szabgab/perlweekly">Perl Weekly</a>.</li>
  <li>Improve <a href="/metacpan">MetaCPAN</a> itself.</li>
  <li>You can find some low-hanging fruits on CPAN:</li>
</ul>

<a href="https://metacpan.org/">MetaCPAN</a> provides a lot of information about CPAN modules, but not all the modules
provide this information. I have written a small script using
<a href="https://metacpan.org/pod/MetaCPAN::Client">MetaCPAN::Client</a> to fetch the N most recently uploaded modules
and check some of these meta data.

The script is here:

<include file="examples/recent_cpan_modules.pl">


You can download it and run it yourself to see the most up to date information. You can also improve the script
and send a PR with the improvement. The source of the script is
<a href="https://github.com/szabgab/perlmaven.com/blob/main/examples/recent_cpan_modules.pl">here</a>.

Currently it checks if the META files contains a link to the source repository of the module and if it has a license in
the META files.

<h3>Link to repository</h3>

If the META file does not contain information about the source code repository then you'll have to do a little research
to find out if the modules is on GitHub at all.

One way is to look at the name of the author. Look at other modules of the same author. If none of them have links to a
"Repository" (on the left side of the MetaCPAN page) then that person probably does not have a version control or not on
Git. You can send an e-mail to the person asking about it or you can move on to something else.

If you found that some other modules have the "Repository" link then using that link you can find the module authors
username on GitHub. It is likely that the source of the module in question is under the same user.

If still cannot find the repository, then send the author an e-mail. S/he might reply quickly and then you can make
progress with it.

Once you know the repository of the module you can follow this article on
<a href="/how-to-add-link-to-version-control-system-of-a-cpan-distributions">adding repository link
to a CPAN distribution</a>.


<h3>License</h3>

If the report generated by the script shows that the META file of the module does not contain a license, or if the license is "unknown",
then check out this article that explains <a href="/how-to-add-the-license-field-to-meta-files-on-cpan">how to add the license field to the META.yml and META.json
files on CPAN</a>. This assumes that you already know where is the source repository of the module.

<h3>Travis-CI</h3>

I have not implemented this yet, but this is the next thing on my agenda.
For the modules that use GitHub and that have links to their GitHub repository, check if they have a <b>.travis.yml</b>
file. If not, then for sure they don't use <a href="https://travis-ci.org/">Travis-CI</a> for Continuous Integration.
In such case first you need to make sure there are tests in the module and that you can run them on your computer.
If there are no tests, add any simple test-case.
Once there is at least one test, you can create a <b>.travis.yml</b>, enable Travis-CI for your clone and once the tests
are passing on Travis-CI as well you can send a pull-request with that file and the information needed to enable
Travis-CI.



On 30 September 2019 I ran the script on the 1,000 most recently uploaded modules and this is what I got.


