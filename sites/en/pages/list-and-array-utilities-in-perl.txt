=title List and Array Utilities in Perl
=timestamp 2015-02-01T07:30:01
=indexes List::Util, List::MoreUtils, List::AllUtils, Util::Any, List::UtilsBy, List::Pairwise
=status draft
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

There are many utilities in perl that work on arrays or even on lists of values that have not been assigned
to an array. Some of these are built in the languages. Others come in a standard module, yet even more of
them can be installed from CPAN. Here you'll find a number of these utility functions and pointers where
can you get them from.


=abstract end

<h2>Built-in functions</h2>

<ul>
  <li><a href="/filtering-values-with-perl-grep">grep</a> can be used to filter values according to some rule.</li>
  <li><a href="/transforming-a-perl-array-using-map">map</a> can be used to transform values of a list or an array (e.g. double each number).</li>
  <li><a href="/search/sort">sort</a> to sort values by any means.</li>
  <li><a href="/reverse">reverse</a> returns the list of values in reverse order</li>
  <li><a href="/manipulating-perl-arrays">pop, push, shift, unshift</a> to add and remove elements at either the beginning or the end of an array.</li>
  <li><a href="/splice-to-slice-and-dice-arrays-in-perl">splice</a> to add and remove elements anywhere in an array.</li>
  <li><a href="/join">join</a> to combine a list of values into a string.</li>
</ul>


<h2><a href="https://metacpan.org/pod/List::Util">List::Util</a></h2>

<ul>
  <li><hl>sum</hl> -  <hl>sum(@numbers)</hl> - returns the sum of numbers given. For backwards compatibility, if <hl>@numbes</hl> is empty then <hl>undef</hl> is returned. Use <hl>sum0</hl> instead!</li>
  <li><hl>sum0</hl> -  Just like <hl>sum</hl> but this will return <hl>0</hl> if the given list was empty.</li>
  <li>first</li>
  <li>max</li>
  <li>maxstr</li>
  <li>min</li>
  <li>minstr</li>
  <li><hl>reduce</hl> - Generic function to reduce a list of value to a single value according to some rule. Many other function in this module are special cases of <hl>reduce</hl>. (For example <hl>sum(@numbers)</hl> is the same as <hl>reduce { $a + $b } @numbers</hl>)</li>
  <li>shuffle</li>
  <li><a href="/filtering-values-with-perl-grep">any</a> is like <hl>grep</hl> in scalar context, but in addition it short-circuites making it potentially much faster. It returns <a href="/how-to-sort-faster-in-perl">true</a></li>
  <li><hl>all</hl> <a href="/does-all-really-short-circuit">short-circuits</a></li>
  <li>none</li>
  <li>product</li>
</ul>


<h2><a href="https://metacpan.org/pod/List::MoreUtils">List::MoreUtils</a></h2>

(any, all, none)

<ul>
  <li>notall</li>
  <li>one</li>
  <li>apply</li>
  <li>insert_after</li>
  <li>insert_after_string</li>
  <li>pairwise</li>
  <li>mesh</li>
  <li>zip</li>
  <li>uniq</li>
  <li>distinct</li>
  <li>singleton</li>
  <li></li>
  <li>after</li>
  <li>before</li>
  <li>part</li>
  <li>each_array</li>
  <li>natatime</li>
  <li>bsearch</li>
  <li>bsearchidx</li>
  <li>bsearch_index</li>
  <li>firstval</li>
  <li>first_value</li>
  <li>onlyval</li>
  <li>only_value,</li>
  <li>lastval</li>
  <li>last_value</li>
  <li>firstres</li>
  <li>first_result</li>
  <li>onlyres</li>
  <li>only_result</li>
  <li>lastres</li>
  <li>last_result</li>
  <li>indexes</li>
  <li>firstidx</li>
  <li>first_index</li>
  <li>onlyidx</li>
  <li>only_index</li>
  <li>lastidx</li>
  <li>last_index</li>
  <li>sort_by</li>
  <li>nsort_by</li>
  <li>true</li>
  <li>false</li>
  <li>minmax</li>
</ul>


<h2><a href="https://metacpan.org/pod/List::AllUtils">List::AllUtils</a></h2>

Combines List::Util and List::MoreUtils in one bite-sized package.


<h2><a href="https://metacpan.org/pod/Util::Any">Util::Any</a></h2>

Makes it easy to built list and array utilities


<h2><a href="https://metacpan.org/pod/List::UtilsBy">List::UtilsBy</a></h2>

<ul>
  <li>sort_by</li>
  <li>nsort_by</li>
  <li>rev_sort_by</li>
  <li>rev_nsort_by</li>
  <li>min_by</li>
  <li>max_by</li>
  <li>uniq_by</li>
  <li>partition_by</li>
  <li>count_by</li>
  <li>zip_by</li>
  <li>unzip_by</li>
  <li>extract_by</li>
  <li>weighted_shuffle_by</li>
  <li>bundle_by</li>
</ul>

<h2><a href="https://metacpan.org/pod/List::Pairwise">List::Pairwise</a></h2>


