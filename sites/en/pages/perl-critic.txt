=title Perl Critic distributions and policies
=timestamp 2015-05-21T11:58:01
=indexes Perl::Critic
=status show
=author szabgab
=archive 1
=comments_disqus_enable 1
=show_related 0

=abstract start

<a href="http://perlcritic.com/">Perl::Critic</a> is configurable lint-like static analyzer for Perl that can provide recommendations how to improve your code and
can even locate code snippets that are sources of common errors. It has a base library that provides the engine and a large set of 
policies (things to be checked). In addition there are a number of distributions on CPAN that provide further policies. 

In this article we collect <b>all</b> the CPAN distributions related to Perl::Critic and all the policies available.

=abstract end

<!-- This page was generated. Please do not edit directly -->
<h2>Articles</h2>

<ul>
  <li><a href="/avoid-unwanted-bitwise-operators">Avoid (unwanted) bitwise operators</a> using <a href="https://metacpan.org/pod/Perl::Critic::Bangs">Perl::Critic::Bangs</a></li>
  <li><a href="/bare-here-documents-are-deprecated">Bare Here documents are deprecated - How to find offending code?</a> using the core <a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireQuotedHeredocTerminator">ValuesAndExpressions::RequireQuotedHeredocTerminator</a> policy.</li>
  <li><a href="/how-to-improve-my-perl-program">How to improve my Perl program?</a> - just use Perl::Critic</li>
  <li><a href="/perl-critic-one-policy">Improving your Perl code - one Perl::Critic policy at a time</a></li>
  <li><a href="/jeffrey-thalhammer-perl-critic-and-pinto">Interview with Jeffrey Thalhammer, author of Perl::Critic and Pinto</a></li>
  <li><a href="/pro/move-packages-to-their-own-files">Move packages to their own files - release Pod::Tree 1.21</a> part of the <a href="http://perlmaven.com/pro/becoming-a-co-maintainer">Refactoring and CPAN co-maintainer</a> series.</li>
  <li><a href="/type-checking-with-moo">Type checking with Moo</a> recommends the use of the <a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitAccessOfPrivateData">ValuesAndExpressions::ProhibitAccessOfPrivateData</a> policy from <a href="https://metacpan.org/pod/Perl::Critic::Nits">Perl::Critic::Nits</a>.</li>
</ul>

<h2>Other Articles</h2>

<ul>
  <li><a href="http://www.slideshare.net/joshua.mcadams/an-introduction-to-perl-critic">An Introduction To Perl Critic</a> slides from 2007</li>
  <li><a href="http://perltraining.com.au/tips/2009-02-05.html">Automatically review your code</a></li>
  <li><a href="http://blogs.perl.org/users/ovid/2012/07/integrating-perlcritic-and-vim.html">Integrating perlcritic and vim</a></li>
  <li><a href="https://security.web.cern.ch/security/recommendations/en/codetools/perl_critic.shtml">Perl::Critic at CERN Computer Security Information</a></li>
  <li><a href="http://chimera.labs.oreilly.com/books/1234000001527/ch07.html">Cleaning Up Perl</a> (Chapter 7 of <a href="http://www.masteringperl.org/">Mastering Perl</a>)</li>
  <li><a href="http://devblog.nestoria.com/post/103804565528/module-of-the-month-november-2014-perl-critic">Module of the month November 2014</a></li>
  <li><a href="http://www.uponmyshoulder.com/blog/2012/format-perlcritic-output-as-tap-to-integrate-with-jenkins/">Format perlcritic output as TAP to integrate with Jenkins</a></li>
</ul>

<h2>Distributions</h2>

<table>
   <tr><th>Distribution</th><th>Abstract</th><th>Author</th><th>Date</th></tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic">Perl-Critic</a></td>
       <td>Critique Perl source code for best-practices.</td>
       <td><a href="https://metacpan.org/author/THALJEF">THALJEF</a></td>
       <td>2015-03-03T05:40:47</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Lax">Perl-Critic-Lax</a></td>
       <td>policies that let you slide on common exceptions</td>
       <td><a href="https://metacpan.org/author/RJBS">RJBS</a></td>
       <td>2014-07-11T03:41:56</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Tics">Perl-Critic-Tics</a></td>
       <td>policies for things that make me wince</td>
       <td><a href="https://metacpan.org/author/RJBS">RJBS</a></td>
       <td>2014-07-28T19:26:56</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-More">Perl-Critic-More</a></td>
       <td>Supplemental policies for Perl::Critic</td>
       <td><a href="https://metacpan.org/author/THALJEF">THALJEF</a></td>
       <td>2013-10-29T16:43:05</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Lokku">Perl-Critic-Lokku</a></td>
       <td>A collection of Perl::Critic policies from Lokku</td>
       <td><a href="https://metacpan.org/author/FLIMM">FLIMM</a></td>
       <td>2015-03-02T16:47:32</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Swift">Perl-Critic-Swift</a></td>
       <td>A set of additional policies for Perl::Critic.</td>
       <td><a href="https://metacpan.org/author/ELLIOTJS">ELLIOTJS</a></td>
       <td>2008-05-04T00:41:35</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Git">Perl-Critic-Git</a></td>
       <td>Bond git and Perl::Critic to blame the right people for violations.</td>
       <td><a href="https://metacpan.org/author/AUBERTG">AUBERTG</a></td>
       <td>2014-04-21T03:18:51</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Bangs">Perl-Critic-Bangs</a></td>
       <td>Perl::Critic::Bangs - A collection of policies for Perl::Critic</td>
       <td><a href="https://metacpan.org/author/PETDANCE">PETDANCE</a></td>
       <td>2012-08-20T20:02:43</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Moose">Perl-Critic-Moose</a></td>
       <td>Policies for Perl::Critic concerned with using Moose</td>
       <td><a href="https://metacpan.org/author/DROLSKY">DROLSKY</a></td>
       <td>2015-04-21T20:19:44</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Itch">Perl-Critic-Itch</a></td>
       <td>Perl::Critic::Itch - A collection of Policies to solve some Itches</td>
       <td><a href="https://metacpan.org/author/MARCELO">MARCELO</a></td>
       <td>2009-05-30T23:56:12</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Pulp">Perl-Critic-Pulp</a></td>
       <td>Some add-on policies for Perl::Critic.</td>
       <td><a href="https://metacpan.org/author/KRYDE">KRYDE</a></td>
       <td>2015-03-07T08:21:45</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Nits">Perl-Critic-Nits</a></td>
       <td>policies of nits I like to pick.</td>
       <td><a href="https://metacpan.org/author/KCOWGILL">KCOWGILL</a></td>
       <td>2007-09-14T22:09:08</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Dynamic">Perl-Critic-Dynamic</a></td>
       <td>Dynamic policies for Perl::Critic.</td>
       <td><a href="https://metacpan.org/author/THALJEF">THALJEF</a></td>
       <td>2010-09-30T22:07:27</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-RENEEB">Perl-Critic-RENEEB</a></td>
       <td>A collection of handy Perl::Critic policies</td>
       <td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
       <td>2015-02-23T20:01:57</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-logicLAB">Perl-Critic-logicLAB</a></td>
       <td>Perl::Critic policies implemented and used by logicLAB</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-08-08T19:20:39</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Storable">Perl-Critic-Storable</a></td>
       <td>policy for Storable.pm</td>
       <td><a href="https://metacpan.org/author/MATTD">MATTD</a></td>
       <td>2008-08-11T09:02:00</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-StricterSubs">Perl-Critic-StricterSubs</a></td>
       <td>Perl::Critic plugin for stricter subroutine checking</td>
       <td><a href="https://metacpan.org/author/THALJEF">THALJEF</a></td>
       <td>2015-02-20T18:52:59</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Compatibility">Perl-Critic-Compatibility</a></td>
       <td>Policies for Perl::Critic concerned with compatibility with various versions of Perl.</td>
       <td><a href="https://metacpan.org/author/ELLIOTJS">ELLIOTJS</a></td>
       <td>2008-06-17T20:59:00</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-Perlsecret">Perl-Critic-Policy-Perlsecret</a></td>
       <td>Prevent perlsecrets entering your codebase</td>
       <td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
       <td>2014-09-14T20:41:25</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-CompileTime">Perl-Critic-Policy-CompileTime</a></td>
       <td>Find code that runs in compile-time blocks</td>
       <td><a href="https://metacpan.org/author/XAN">XAN</a></td>
       <td>2014-09-26T20:34:02</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-PetPeeves-JTRAMMELL">Perl-Critic-PetPeeves-JTRAMMELL</a></td>
       <td>policies to prohibit/require my pet peeves</td>
       <td><a href="https://metacpan.org/author/JTRAMMELL">JTRAMMELL</a></td>
       <td>2014-04-28T19:13:24</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Test-Perl-Critic">Test-Perl-Critic</a></td>
       <td>Use Perl::Critic in test programs.</td>
       <td><a href="https://metacpan.org/author/THALJEF">THALJEF</a></td>
       <td>2015-02-03T18:45:55</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Deprecated">Perl-Critic-Deprecated</a></td>
       <td>Policies and modules that were formerly included with Perl::Critic itself, but which have been superseded by others.</td>
       <td><a href="https://metacpan.org/author/THALJEF">THALJEF</a></td>
       <td>2013-10-29T16:43:17</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-OTRS">Perl-Critic-OTRS</a></td>
       <td>A collection of handy Perl::Critic policies</td>
       <td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
       <td>2015-01-25T08:27:30</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-CodeLayout-ProhibitSpaceIndentation">Perl-Critic-Policy-CodeLayout-ProhibitSpaceIndentation</a></td>
       <td>Use tabs instead of spaces for indentation.</td>
       <td><a href="https://metacpan.org/author/IXA">IXA</a></td>
       <td>2012-10-04T23:30:39</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-CodeLayout-TabIndentSpaceAlign">Perl-Critic-Policy-CodeLayout-TabIndentSpaceAlign</a></td>
       <td>Use tabs for indenting, spaces for aligning.</td>
       <td><a href="https://metacpan.org/author/AUBERTG">AUBERTG</a></td>
       <td>2014-06-09T07:06:32</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-Dynamic-NoIndirect">Perl-Critic-Policy-Dynamic-NoIndirect</a></td>
       <td>Perl::Critic policy against indirect method calls.</td>
       <td><a href="https://metacpan.org/author/VPIT">VPIT</a></td>
       <td>2011-08-25T14:55:26</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-References-ProhibitComplexDoubleSigils">Perl-Critic-Policy-References-ProhibitComplexDoubleSigils</a></td>
       <td>allow $$foo</td>
       <td><a href="https://metacpan.org/author/XENU">XENU</a></td>
       <td>2015-03-14T21:17:38</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-ValuesAndExpressions-PreventSQLInjection">Perl-Critic-Policy-ValuesAndExpressions-PreventSQLInjection</a></td>
       <td>Prevent SQL injection in interpolated strings.</td>
       <td><a href="https://metacpan.org/author/AUBERTG">AUBERTG</a></td>
       <td>2014-04-21T03:30:39</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-Variables-ProhibitUnusedVarsStricter">Perl-Critic-Policy-Variables-ProhibitUnusedVarsStricter</a></td>
       <td>Critique unused variables in Perl source</td>
       <td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
       <td>2014-12-12T16:04:02</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-ModuleBlacklist">Perl-Critic-Policy-logicLAB-ModuleBlacklist</a></td>
       <td>blacklist modules you want to prohibit use of</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-08-28T15:53:27</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-ProhibitShellDispatch">Perl-Critic-Policy-logicLAB-ProhibitShellDispatch</a></td>
       <td>simple policy prohibiting dispatching to shell</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-01-24T20:36:34</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-ProhibitUseLib">Perl-Critic-Policy-logicLAB-ProhibitUseLib</a></td>
       <td>simple policy prohibiting the use of 'use lib'</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-02-27T14:56:27</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-RequirePackageNamePattern">Perl-Critic-Policy-logicLAB-RequirePackageNamePattern</a></td>
       <td>simple policy for enforcing a package naming policy</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-03-09T16:12:12</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-RequireParamsValidate">Perl-Critic-Policy-logicLAB-RequireParamsValidate</a></td>
       <td>simple policy for enforcing use of Params::Validate</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-03-05T21:34:18</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-RequireSheBang">Perl-Critic-Policy-logicLAB-RequireSheBang</a></td>
       <td>simple policy asserting she bang line</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-08-11T19:31:04</td>
   </tr>
   <tr><td><a href="https://metacpan.org/release/Perl-Critic-Policy-logicLAB-RequireVersionFormat">Perl-Critic-Policy-logicLAB-RequireVersionFormat</a></td>
       <td>a simple policy enforcing strict version formatting</td>
       <td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
       <td>2014-08-11T19:35:06</td>
   </tr>
</table>


<h2>Policies</h2>

<table>
  <tr>
    <th>Name</th>
    <th>Level</th>
    <th>Abstract</th>
  </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitBooleanGrep">BuiltinFunctions::ProhibitBooleanGrep</a></td>
      <td>5</td>
      <td>Use List::MoreUtils::any instead of grep in boolean context.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitComplexMappings">BuiltinFunctions::ProhibitComplexMappings</a></td>
      <td>5</td>
      <td>Map blocks should have a single statement.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitLvalueSubstr">BuiltinFunctions::ProhibitLvalueSubstr</a></td>
      <td>5</td>
      <td>Use 4-argument substr instead of writing substr($foo, 2, 6) = $bar.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitReverseSortBlock">BuiltinFunctions::ProhibitReverseSortBlock</a></td>
      <td>5</td>
      <td>Forbid $b before $a in sort blocks.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitSleepViaSelect">BuiltinFunctions::ProhibitSleepViaSelect</a></td>
      <td>5</td>
      <td>Use Time::HiRes instead of something like select(undef, undef, undef, .05).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitStringyEval">BuiltinFunctions::ProhibitStringyEval</a></td>
      <td>5</td>
      <td>Write eval { my $foo; bar($foo) } instead of eval "my $foo; bar($foo);".</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitStringySplit">BuiltinFunctions::ProhibitStringySplit</a></td>
      <td>5</td>
      <td>Write split /-/, $string instead of split '-', $string.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalCan">BuiltinFunctions::ProhibitUniversalCan</a></td>
      <td>5</td>
      <td>Write < eval { $foo-can($name) } >> instead of UNIVERSAL::can($foo, $name).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalIsa">BuiltinFunctions::ProhibitUniversalIsa</a></td>
      <td>5</td>
      <td>Write < eval { $foo-isa($pkg) } >> instead of UNIVERSAL::isa($foo, $pkg).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitUselessTopic">BuiltinFunctions::ProhibitUselessTopic</a></td>
      <td>5</td>
      <td>Don't pass $_ to built-in functions that assume it, or to most filetest operators.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidGrep">BuiltinFunctions::ProhibitVoidGrep</a></td>
      <td>5</td>
      <td>Don't use grep in void contexts.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidMap">BuiltinFunctions::ProhibitVoidMap</a></td>
      <td>5</td>
      <td>Don't use map in void contexts.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireBlockGrep">BuiltinFunctions::RequireBlockGrep</a></td>
      <td>5</td>
      <td>Write grep { /$pattern/ } @list instead of grep /$pattern/, @list.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireBlockMap">BuiltinFunctions::RequireBlockMap</a></td>
      <td>5</td>
      <td>Write map { /$pattern/ } @list instead of map /$pattern/, @list.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireGlobFunction">BuiltinFunctions::RequireGlobFunction</a></td>
      <td>5</td>
      <td>Use glob q{*} instead of <*>.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireSimpleSortBlock">BuiltinFunctions::RequireSimpleSortBlock</a></td>
      <td>5</td>
      <td>Sort blocks should have a single statement.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ClassHierarchies::ProhibitAutoloading">ClassHierarchies::ProhibitAutoloading</a></td>
      <td>5</td>
      <td>AUTOLOAD methods should be avoided.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ClassHierarchies::ProhibitExplicitISA">ClassHierarchies::ProhibitExplicitISA</a></td>
      <td>5</td>
      <td>Employ use base instead of @ISA.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ClassHierarchies::ProhibitOneArgBless">ClassHierarchies::ProhibitOneArgBless</a></td>
      <td>5</td>
      <td>Write bless {}, $class; instead of just bless {};.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitFatCommaNewline">CodeLayout::ProhibitFatCommaNewline</a></td>
      <td>5</td>
      <td>keep a fat comma on the same line as its quoted word</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitHardTabs">CodeLayout::ProhibitHardTabs</a></td>
      <td>5</td>
      <td>Use spaces instead of tabs.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitIfIfSameLine">CodeLayout::ProhibitIfIfSameLine</a></td>
      <td>5</td>
      <td>don't put if after if on same line</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitParensWithBuiltins">CodeLayout::ProhibitParensWithBuiltins</a></td>
      <td>5</td>
      <td>Write open $handle, $path instead of open($handle, $path).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitQuotedWordLists">CodeLayout::ProhibitQuotedWordLists</a></td>
      <td>5</td>
      <td>Write qw(foo bar baz) instead of ('foo', 'bar', 'baz').</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::ProhibitTrailingWhitespace">CodeLayout::ProhibitTrailingWhitespace</a></td>
      <td>5</td>
      <td>Don't use whitespace at the end of lines.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireASCII">CodeLayout::RequireASCII</a></td>
      <td>5</td>
      <td>Disallow high-bit characters.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireConsistentNewlines">CodeLayout::RequireConsistentNewlines</a></td>
      <td>5</td>
      <td>Use the same newline through the source.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireFinalSemicolon">CodeLayout::RequireFinalSemicolon</a></td>
      <td>5</td>
      <td>require a semicolon at the end of code blocks</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireTidyCode">CodeLayout::RequireTidyCode</a></td>
      <td>5</td>
      <td>Must run code through perltidy.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireTrailingCommaAtNewline">CodeLayout::RequireTrailingCommaAtNewline</a></td>
      <td>5</td>
      <td>comma at end of list at newline</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireTrailingCommas">CodeLayout::RequireTrailingCommas</a></td>
      <td>5</td>
      <td>Put a comma at the end of every multi-line list declaration, including the last one.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::RequireUseUTF8">CodeLayout::RequireUseUTF8</a></td>
      <td>5</td>
      <td>Require that all modules have a use utf8; statement.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CodeLayout::TabIndentSpaceAlign">CodeLayout::TabIndentSpaceAlign</a></td>
      <td>5</td>
      <td>Use tabs for indenting, spaces for aligning.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::ConstantLeadingUnderscore">Compatibility::ConstantLeadingUnderscore</a></td>
      <td>5</td>
      <td>new enough "constant" module for leading underscores</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::ConstantPragmaHash">Compatibility::ConstantPragmaHash</a></td>
      <td>5</td>
      <td>new enough "constant" module for multiple constants</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::Gtk2Constants">Compatibility::Gtk2Constants</a></td>
      <td>5</td>
      <td>new enough Gtk2 version for its constants</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::PerlMinimumVersionAndWhy">Compatibility::PerlMinimumVersionAndWhy</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::PodMinimumVersion">Compatibility::PodMinimumVersion</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::ProhibitThreeArgumentOpen">Compatibility::ProhibitThreeArgumentOpen</a></td>
      <td>5</td>
      <td>Don't allow three-argument open unless the code uses a version of perl that supports it.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Compatibility::ProhibitUnixDevNull">Compatibility::ProhibitUnixDevNull</a></td>
      <td>5</td>
      <td>don't use explicit /dev/null</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::CompileTime">CompileTime</a></td>
      <td>4</td>
      <td>Provide Perl::Critic support for hunting down compile-time side effects</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitCascadingIfElse">ControlStructures::ProhibitCascadingIfElse</a></td>
      <td>5</td>
      <td>Don't write long "if-elsif-elsif-elsif-elsif...else" chains.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitCStyleForLoops">ControlStructures::ProhibitCStyleForLoops</a></td>
      <td>5</td>
      <td>Write for(0..20) instead of for($i=0; $i<=20; $i++).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitDeepNests">ControlStructures::ProhibitDeepNests</a></td>
      <td>5</td>
      <td>Don't write deeply nested loops and conditionals.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitLabelsWithSpecialBlockNames">ControlStructures::ProhibitLabelsWithSpecialBlockNames</a></td>
      <td>5</td>
      <td>Don't use labels that are the same as the special block names.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitMutatingListFunctions">ControlStructures::ProhibitMutatingListFunctions</a></td>
      <td>5</td>
      <td>Don't modify $_ in list functions.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions">ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions</a></td>
      <td>5</td>
      <td>Don't use operators like not, !~, and le within until and unless.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitPostfixControls">ControlStructures::ProhibitPostfixControls</a></td>
      <td>5</td>
      <td>Write if($condition){ do_something() } instead of do_something() if $condition.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitUnlessBlocks">ControlStructures::ProhibitUnlessBlocks</a></td>
      <td>5</td>
      <td>Write if(! $condition) instead of unless($condition).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitUnreachableCode">ControlStructures::ProhibitUnreachableCode</a></td>
      <td>5</td>
      <td>Don't write code after an unconditional die, exit, or next.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitUntilBlocks">ControlStructures::ProhibitUntilBlocks</a></td>
      <td>5</td>
      <td>Write while(! $condition) instead of until($condition).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::PodSpelling">Documentation::PodSpelling</a></td>
      <td>5</td>
      <td>Check your spelling.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitAdjacentLinks">Documentation::ProhibitAdjacentLinks</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitAdjacentLinks::Parser">Documentation::ProhibitAdjacentLinks::Parser</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitBadAproposMarkup">Documentation::ProhibitBadAproposMarkup</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitDuplicateHeadings">Documentation::ProhibitDuplicateHeadings</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitDuplicateSeeAlso">Documentation::ProhibitDuplicateSeeAlso</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitLinkToSelf">Documentation::ProhibitLinkToSelf</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitParagraphEndComma">Documentation::ProhibitParagraphEndComma</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitParagraphTwoDots">Documentation::ProhibitParagraphTwoDots</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitUnbalancedParens">Documentation::ProhibitUnbalancedParens</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::ProhibitVerbatimMarkup">Documentation::ProhibitVerbatimMarkup</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequireEndBeforeLastPod">Documentation::RequireEndBeforeLastPod</a></td>
      <td>5</td>
      <td>require __END__ before POD at end of file</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequireFilenameMarkup">Documentation::RequireFilenameMarkup</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequireFinalCut">Documentation::RequireFinalCut</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequireLinkedURLs">Documentation::RequireLinkedURLs</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequirePackageMatchesPodName">Documentation::RequirePackageMatchesPodName</a></td>
      <td>5</td>
      <td>The =head1 NAME section should match the package.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequirePodAtEnd">Documentation::RequirePodAtEnd</a></td>
      <td>5</td>
      <td>All POD should be after __END__.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequirePodLinksIncludeText">Documentation::RequirePodLinksIncludeText</a></td>
      <td>5</td>
      <td>Provide text to display with your pod links.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequirePodSections">Documentation::RequirePodSections</a></td>
      <td>5</td>
      <td>Organize your POD into the customary sections.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequirePODUseEncodingUTF8">Documentation::RequirePODUseEncodingUTF8</a></td>
      <td>5</td>
      <td>Require that all modules that contain POD have a =encoding utf8 declaration.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Dynamic::ValidateAgainstSymbolTable">Dynamic::ValidateAgainstSymbolTable</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Editor::RequireEmacsFileVariables">Editor::RequireEmacsFileVariables</a></td>
      <td>5</td>
      <td>Per-file editor settings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ErrorHandling::RequireCarping">ErrorHandling::RequireCarping</a></td>
      <td>5</td>
      <td>Use functions from Carp instead of warn or die.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ErrorHandling::RequireCheckingReturnValueOfEval">ErrorHandling::RequireCheckingReturnValueOfEval</a></td>
      <td>5</td>
      <td>You can't depend upon the value of $@/$EVAL_ERROR to tell whether an eval failed.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ErrorHandling::RequireUseOfExceptions">ErrorHandling::RequireUseOfExceptions</a></td>
      <td>5</td>
      <td>Use exceptions instead of die, croak, or confess.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitBacktickOperators">InputOutput::ProhibitBacktickOperators</a></td>
      <td>5</td>
      <td>Discourage stuff like @files = `ls $directory`.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitBarewordFileHandles">InputOutput::ProhibitBarewordFileHandles</a></td>
      <td>5</td>
      <td>Write open my $fh, q{<}, $filename; instead of open FH, q{<}, $filename;.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitExplicitStdin">InputOutput::ProhibitExplicitStdin</a></td>
      <td>5</td>
      <td>Use "<>" or "<ARGV>" or a prompting module instead of "<STDIN>".</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitInteractiveTest">InputOutput::ProhibitInteractiveTest</a></td>
      <td>5</td>
      <td>Use prompt() instead of -t.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitJoinedReadline">InputOutput::ProhibitJoinedReadline</a></td>
      <td>5</td>
      <td>Use local $/ = undef or File::Slurp instead of joined readline.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitOneArgSelect">InputOutput::ProhibitOneArgSelect</a></td>
      <td>5</td>
      <td>Never write select($fh).</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitReadlineInForLoop">InputOutput::ProhibitReadlineInForLoop</a></td>
      <td>5</td>
      <td>Write < while( $line = < ){...} >> instead of < for(<){...} >>.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitTwoArgOpen">InputOutput::ProhibitTwoArgOpen</a></td>
      <td>5</td>
      <td>Write < open $fh, q{<}, $filename; > instead of < open $fh, "<$filename"; >.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireBracedFileHandleWithPrint">InputOutput::RequireBracedFileHandleWithPrint</a></td>
      <td>5</td>
      <td>Write print {$FH} $foo, $bar; instead of print $FH $foo, $bar;.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireBriefOpen">InputOutput::RequireBriefOpen</a></td>
      <td>5</td>
      <td>Close filehandles as soon as possible after opening them.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireCheckedClose">InputOutput::RequireCheckedClose</a></td>
      <td>5</td>
      <td>Write < my $error = close $fh; > instead of < close $fh; >.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireCheckedOpen">InputOutput::RequireCheckedOpen</a></td>
      <td>5</td>
      <td>Write < my $error = open $fh, $mode, $filename; > instead of < open $fh, $mode, $filename; >.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireCheckedSyscalls">InputOutput::RequireCheckedSyscalls</a></td>
      <td>5</td>
      <td>Return value of flagged function ignored.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireEncodingWithUTF8Layer">InputOutput::RequireEncodingWithUTF8Layer</a></td>
      <td>5</td>
      <td>Write < open $fh, q{<:encoding(UTF-8)}, $filename; > instead of < open $fh, q{{<:utf8}, $filename; >.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Lax::ProhibitComplexMappings::LinesNotStatements">Lax::ProhibitComplexMappings::LinesNotStatements</a></td>
      <td>6</td>
      <td>prohibit multiline maps, not multistatement maps</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Lax::ProhibitEmptyQuotes::ExceptAsFallback">Lax::ProhibitEmptyQuotes::ExceptAsFallback</a></td>
      <td>6</td>
      <td>empty quotes are okay as the fallback on the rhs of ||</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Lax::ProhibitLeadingZeros::ExceptChmod">Lax::ProhibitLeadingZeros::ExceptChmod</a></td>
      <td>6</td>
      <td>leading zeroes are okay as the first arg to chmod</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Lax::ProhibitStringyEval::ExceptForRequire">Lax::ProhibitStringyEval::ExceptForRequire</a></td>
      <td>6</td>
      <td>stringy eval is bad, but it's okay just to "require"</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Lax::RequireEndWithTrueConst">Lax::RequireEndWithTrueConst</a></td>
      <td>5</td>
      <td>ending your package with a simple, fun true value is okay</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Lax::RequireExplicitPackage::ExceptForPragmata">Lax::RequireExplicitPackage::ExceptForPragmata</a></td>
      <td>6</td>
      <td>you can put strict and warnings before "package"</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::ModuleBlacklist">logicLAB::ModuleBlacklist</a></td>
      <td>5</td>
      <td>blacklist modules you want to prohibit use of</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::ProhibitShellDispatch">logicLAB::ProhibitShellDispatch</a></td>
      <td>5</td>
      <td>simple policy prohibiting shell dispatching</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::ProhibitUseLib">logicLAB::ProhibitUseLib</a></td>
      <td>5</td>
      <td>simple policy prohibiting the use of 'use lib'</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::RequirePackageNamePattern">logicLAB::RequirePackageNamePattern</a></td>
      <td>5</td>
      <td>simple policy for enforcing a package naming policy</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::RequireParamsValidate">logicLAB::RequireParamsValidate</a></td>
      <td>5</td>
      <td>simple policy for enforcing use of Params::Validate</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::RequireSheBang">logicLAB::RequireSheBang</a></td>
      <td>5</td>
      <td>simple policy for keeping your shebang line uniform</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::logicLAB::RequireVersionFormat">logicLAB::RequireVersionFormat</a></td>
      <td>5</td>
      <td>assert version number formats</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::ProhibitFormats">Miscellanea::ProhibitFormats</a></td>
      <td>5</td>
      <td>Do not use format.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::ProhibitTies">Miscellanea::ProhibitTies</a></td>
      <td>5</td>
      <td>Do not use tie.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::ProhibitUnrestrictedNoCritic">Miscellanea::ProhibitUnrestrictedNoCritic</a></td>
      <td>5</td>
      <td>Forbid a bare ## no critic</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::ProhibitUselessNoCritic">Miscellanea::ProhibitUselessNoCritic</a></td>
      <td>5</td>
      <td>Remove ineffective "## no critic" annotations.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::RequireRcsKeywords">Miscellanea::RequireRcsKeywords</a></td>
      <td>5</td>
      <td>Put source-control keywords in every file.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::TextDomainPlaceholders">Miscellanea::TextDomainPlaceholders</a></td>
      <td>5</td>
      <td>check placeholder names in Locale::TextDomain calls</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Miscellanea::TextDomainUnused">Miscellanea::TextDomainUnused</a></td>
      <td>5</td>
      <td>check for Locale::TextDomain imported but unused</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::PerlMinimumVersion">Modules::PerlMinimumVersion</a></td>
      <td>5</td>
      <td>Enforce backward compatible code.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitAutomaticExportation">Modules::ProhibitAutomaticExportation</a></td>
      <td>5</td>
      <td>Export symbols via @EXPORT_OK or %EXPORT_TAGS instead of @EXPORT.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitConditionalUseStatements">Modules::ProhibitConditionalUseStatements</a></td>
      <td>5</td>
      <td>Avoid putting conditional logic around compile-time includes.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitEvilModules">Modules::ProhibitEvilModules</a></td>
      <td>5</td>
      <td>Ban modules that aren't blessed by your shop.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitExcessMainComplexity">Modules::ProhibitExcessMainComplexity</a></td>
      <td>5</td>
      <td>Minimize complexity in code that is outside of subroutines.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitModuleShebang">Modules::ProhibitModuleShebang</a></td>
      <td>5</td>
      <td>don't put a #! line at the start of a module file</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitMultiplePackages">Modules::ProhibitMultiplePackages</a></td>
      <td>5</td>
      <td>Put packages (especially subclasses) in separate files.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitPOSIXimport">Modules::ProhibitPOSIXimport</a></td>
      <td>5</td>
      <td>don't import the whole of POSIX into a module</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitUseQuotedVersion">Modules::ProhibitUseQuotedVersion</a></td>
      <td>5</td>
      <td>avoid quoted version number string in a "use" statement</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireBarewordIncludes">Modules::RequireBarewordIncludes</a></td>
      <td>5</td>
      <td>Write require Module instead of require 'Module.pm'.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireEndWithOne">Modules::RequireEndWithOne</a></td>
      <td>5</td>
      <td>End each module with an explicitly 1; instead of some funky expression.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireExplicitInclusion">Modules::RequireExplicitInclusion</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireExplicitPackage">Modules::RequireExplicitPackage</a></td>
      <td>5</td>
      <td>Always make the package explicit.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireFilenameMatchesPackage">Modules::RequireFilenameMatchesPackage</a></td>
      <td>5</td>
      <td>Package declaration must match filename.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireNoMatchVarsWithUseEnglish">Modules::RequireNoMatchVarsWithUseEnglish</a></td>
      <td>5</td>
      <td>use English must be passed a -no_match_vars argument.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequirePerlVersion">Modules::RequirePerlVersion</a></td>
      <td>5</td>
      <td>Require a use 5.006; or similar.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireVersionVar">Modules::RequireVersionVar</a></td>
      <td>5</td>
      <td>Give every module a $VERSION number.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Moose::ProhibitDESTROYMethod">Moose::ProhibitDESTROYMethod</a></td>
      <td>5</td>
      <td>Use DEMOLISH instead of DESTROY</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Moose::ProhibitMultipleWiths">Moose::ProhibitMultipleWiths</a></td>
      <td>5</td>
      <td>Require role composition</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Moose::ProhibitNewMethod">Moose::ProhibitNewMethod</a></td>
      <td>5</td>
      <td>Don't override Moose's standard constructors.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Moose::RequireCleanNamespace">Moose::RequireCleanNamespace</a></td>
      <td>5</td>
      <td>Require removing implementation details from you packages.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Moose::RequireMakeImmutable">Moose::RequireMakeImmutable</a></td>
      <td>5</td>
      <td>Ensure that you've made your Moose code fast</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::NamingConventions::Capitalization">NamingConventions::Capitalization</a></td>
      <td>5</td>
      <td>Distinguish different program components by case.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::NamingConventions::ProhibitAmbiguousNames">NamingConventions::ProhibitAmbiguousNames</a></td>
      <td>5</td>
      <td>Don't use vague variable or subroutine names like 'last' or 'record'.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::NamingConventions::ProhibitMixedCaseSubs">NamingConventions::ProhibitMixedCaseSubs</a></td>
      <td>5</td>
      <td>Write sub my_function{} instead of sub MyFunction{}.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::NamingConventions::ProhibitMixedCaseVars">NamingConventions::ProhibitMixedCaseVars</a></td>
      <td>5</td>
      <td>Write $my_variable = 42 instead of $MyVariable = 42.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Objects::ProhibitIndirectSyntax">Objects::ProhibitIndirectSyntax</a></td>
      <td>5</td>
      <td>Prohibit indirect object call syntax.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitDumper">OTRS::ProhibitDumper</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitFetchrowHashref">OTRS::ProhibitFetchrowHashref</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitLocaltime">OTRS::ProhibitLocaltime</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitLowPrecedenceOps">OTRS::ProhibitLowPrecedenceOps</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitOpen">OTRS::ProhibitOpen</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitPushISA">OTRS::ProhibitPushISA</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitRequire">OTRS::ProhibitRequire</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitRmtree">OTRS::ProhibitRmtree</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::ProhibitSomeCoreFunctions">OTRS::ProhibitSomeCoreFunctions</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::RequireCamelCase">OTRS::RequireCamelCase</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::RequireParensWithMethods">OTRS::RequireParensWithMethods</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::OTRS::RequireTrueReturnValueForModules">OTRS::RequireTrueReturnValueForModules</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Perlsecret">Perlsecret</a></td>
      <td>4</td>
      <td>Prevent perlsecrets entering your codebase</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::References::ProhibitComplexDoubleSigils">References::ProhibitComplexDoubleSigils</a></td>
      <td>5</td>
      <td>allow $$foo but not $$foo[1]-E<gt{dadsdas}-gt[7]>.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::References::ProhibitDoubleSigils">References::ProhibitDoubleSigils</a></td>
      <td>5</td>
      <td>Write @{ $array_ref } instead of @$array_ref.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitCaptureWithoutTest">RegularExpressions::ProhibitCaptureWithoutTest</a></td>
      <td>5</td>
      <td>Capture variable used outside conditional.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitComplexRegexes">RegularExpressions::ProhibitComplexRegexes</a></td>
      <td>5</td>
      <td>Split long regexps into smaller qr// chunks.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitEnumeratedClasses">RegularExpressions::ProhibitEnumeratedClasses</a></td>
      <td>5</td>
      <td>Use named character classes instead of explicit character lists.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitEscapedMetacharacters">RegularExpressions::ProhibitEscapedMetacharacters</a></td>
      <td>5</td>
      <td>Use character classes for literal meta-characters instead of escapes.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitFixedStringMatches">RegularExpressions::ProhibitFixedStringMatches</a></td>
      <td>5</td>
      <td>Use eq or hash instead of fixed-pattern regexps.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitSingleCharAlternation">RegularExpressions::ProhibitSingleCharAlternation</a></td>
      <td>5</td>
      <td>Use [abc] instead of a.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitUnusedCapture">RegularExpressions::ProhibitUnusedCapture</a></td>
      <td>5</td>
      <td>Only use a capturing group if you plan to use the captured value.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitUnusualDelimiters">RegularExpressions::ProhibitUnusualDelimiters</a></td>
      <td>5</td>
      <td>Use only // or {} to delimit regexps.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::ProhibitUselessTopic">RegularExpressions::ProhibitUselessTopic</a></td>
      <td>5</td>
      <td>Don't use $_ to match against regexes.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::RequireBracesForMultiline">RegularExpressions::RequireBracesForMultiline</a></td>
      <td>5</td>
      <td>Use { and } to delimit multi-line regexps.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::RequireDotMatchAnything">RegularExpressions::RequireDotMatchAnything</a></td>
      <td>5</td>
      <td>Always use the /s modifier with regular expressions.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::RequireExtendedFormatting">RegularExpressions::RequireExtendedFormatting</a></td>
      <td>5</td>
      <td>Always use the /x modifier with regular expressions.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::RequireExtendedFormattingExceptForSplit">RegularExpressions::RequireExtendedFormattingExceptForSplit</a></td>
      <td>5</td>
      <td>Always use the /x modifier with regular expressions, except when the regex is used</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::RegularExpressions::RequireLineBoundaryMatching">RegularExpressions::RequireLineBoundaryMatching</a></td>
      <td>5</td>
      <td>Always use the /m modifier with regular expressions.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitAmpersandSigils">Subroutines::ProhibitAmpersandSigils</a></td>
      <td>5</td>
      <td>Don't call functions with a leading ampersand sigil.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitBuiltinHomonyms">Subroutines::ProhibitBuiltinHomonyms</a></td>
      <td>5</td>
      <td>Don't declare your own open function.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitCallsToUndeclaredSubs">Subroutines::ProhibitCallsToUndeclaredSubs</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitCallsToUnexportedSubs">Subroutines::ProhibitCallsToUnexportedSubs</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExcessComplexity">Subroutines::ProhibitExcessComplexity</a></td>
      <td>5</td>
      <td>Minimize complexity by factoring code into smaller subroutines.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef">Subroutines::ProhibitExplicitReturnUndef</a></td>
      <td>5</td>
      <td>Return failure with bare return instead of return undef.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExportingUndeclaredSubs">Subroutines::ProhibitExportingUndeclaredSubs</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitManyArgs">Subroutines::ProhibitManyArgs</a></td>
      <td>5</td>
      <td>Too many arguments.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitNestedSubs">Subroutines::ProhibitNestedSubs</a></td>
      <td>5</td>
      <td>sub never { sub correct {} }.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitQualifiedSubDeclarations">Subroutines::ProhibitQualifiedSubDeclarations</a></td>
      <td>5</td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitReturnSort">Subroutines::ProhibitReturnSort</a></td>
      <td>5</td>
      <td>Behavior of sort is not defined if called in scalar context.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitSubroutinePrototypes">Subroutines::ProhibitSubroutinePrototypes</a></td>
      <td>5</td>
      <td>Don't write sub my_function (@@) {}.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitUnusedPrivateSubroutines">Subroutines::ProhibitUnusedPrivateSubroutines</a></td>
      <td>5</td>
      <td>Prevent unused private subroutines.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProtectPrivateSubs">Subroutines::ProtectPrivateSubs</a></td>
      <td>5</td>
      <td>Prevent access to private subs in other packages.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::RequireArgUnpacking">Subroutines::RequireArgUnpacking</a></td>
      <td>5</td>
      <td>Always unpack @_ first.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::RequireFinalReturn">Subroutines::RequireFinalReturn</a></td>
      <td>5</td>
      <td>End every path through a subroutine with an explicit return statement.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::ProhibitNoStrict">TestingAndDebugging::ProhibitNoStrict</a></td>
      <td>5</td>
      <td>Prohibit various flavors of no strict.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::ProhibitNoWarnings">TestingAndDebugging::ProhibitNoWarnings</a></td>
      <td>5</td>
      <td>Prohibit various flavors of no warnings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::ProhibitProlongedStrictureOverride">TestingAndDebugging::ProhibitProlongedStrictureOverride</a></td>
      <td>5</td>
      <td>Don't turn off strict for large blocks of code.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireTestLabels">TestingAndDebugging::RequireTestLabels</a></td>
      <td>5</td>
      <td>Tests should all have labels.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireUseStrict">TestingAndDebugging::RequireUseStrict</a></td>
      <td>5</td>
      <td>Always use strict.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireUseWarnings">TestingAndDebugging::RequireUseWarnings</a></td>
      <td>5</td>
      <td>Always use warnings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Tics::ProhibitLongLines">Tics::ProhibitLongLines</a></td>
      <td>5</td>
      <td>80 x 40 for life!</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Tics::ProhibitManyArrows">Tics::ProhibitManyArrows</a></td>
      <td>5</td>
      <td>(this => is => not => good)</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Tics::ProhibitUseBase">Tics::ProhibitUseBase</a></td>
      <td>5</td>
      <td>do not use base.pm</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TryTiny::ProhibitExitingSubroutine">TryTiny::ProhibitExitingSubroutine</a></td>
      <td>5</td>
      <td>Ban next/last/return in Try::Tiny blocks</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::TryTiny::RequireCatch">TryTiny::RequireCatch</a></td>
      <td>5</td>
      <td>Always include a "catch" block when using "try"</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ConstantBeforeLt">ValuesAndExpressions::ConstantBeforeLt</a></td>
      <td>5</td>
      <td>disallow bareword before <</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::NotWithCompare">ValuesAndExpressions::NotWithCompare</a></td>
      <td>5</td>
      <td>logical not used with compare</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::PreventSQLInjection">ValuesAndExpressions::PreventSQLInjection</a></td>
      <td>5</td>
      <td>Prevent SQL injection in interpolated strings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitArrayAssignAref">ValuesAndExpressions::ProhibitArrayAssignAref</a></td>
      <td>5</td>
      <td>don't assign an anonymous arrayref to an array</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitBarewordDoubleColon">ValuesAndExpressions::ProhibitBarewordDoubleColon</a></td>
      <td>5</td>
      <td>don't use Foo:: style barewords</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitCommaSeparatedStatements">ValuesAndExpressions::ProhibitCommaSeparatedStatements</a></td>
      <td>5</td>
      <td>Don't use the comma operator as a statement separator.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitComplexVersion">ValuesAndExpressions::ProhibitComplexVersion</a></td>
      <td>5</td>
      <td>Prohibit version values from outside the module.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitConstantPragma">ValuesAndExpressions::ProhibitConstantPragma</a></td>
      <td>5</td>
      <td>Don't < use constant FOO = 15 >>.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitDuplicateHashKeys">ValuesAndExpressions::ProhibitDuplicateHashKeys</a></td>
      <td></td>
      <td></td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitEmptyCommas">ValuesAndExpressions::ProhibitEmptyCommas</a></td>
      <td>5</td>
      <td>disallow empty consecutive commas</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitEmptyQuotes">ValuesAndExpressions::ProhibitEmptyQuotes</a></td>
      <td>5</td>
      <td>Write q{} instead of ''.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitEscapedCharacters">ValuesAndExpressions::ProhibitEscapedCharacters</a></td>
      <td>5</td>
      <td>Write "\N{DELETE}" instead of "\x7F", etc.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitFiletest_f">ValuesAndExpressions::ProhibitFiletest_f</a></td>
      <td>5</td>
      <td>don't use the -f file test</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitImplicitNewlines">ValuesAndExpressions::ProhibitImplicitNewlines</a></td>
      <td>5</td>
      <td>Use concatenation or HEREDOCs instead of literal line breaks in strings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitInterpolationOfLiterals">ValuesAndExpressions::ProhibitInterpolationOfLiterals</a></td>
      <td>5</td>
      <td>Always use single quotes for literal strings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitLeadingZeros">ValuesAndExpressions::ProhibitLeadingZeros</a></td>
      <td>5</td>
      <td>Write oct(755) instead of 0755.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitLongChainsOfMethodCalls">ValuesAndExpressions::ProhibitLongChainsOfMethodCalls</a></td>
      <td>5</td>
      <td>Long chains of method calls indicate tightly coupled code.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitMagicNumbers">ValuesAndExpressions::ProhibitMagicNumbers</a></td>
      <td>5</td>
      <td>Don't use values that don't explain themselves.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitMismatchedOperators">ValuesAndExpressions::ProhibitMismatchedOperators</a></td>
      <td>5</td>
      <td>Don't mix numeric operators with string operands, or vice-versa.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitMixedBooleanOperators">ValuesAndExpressions::ProhibitMixedBooleanOperators</a></td>
      <td>5</td>
      <td>Write  !$foo && $bar  instead of  not $foo && $bar or $baz.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitNoisyQuotes">ValuesAndExpressions::ProhibitNoisyQuotes</a></td>
      <td>5</td>
      <td>Use q{} or qq{} instead of quotes for awkward-looking strings.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitNullStatements">ValuesAndExpressions::ProhibitNullStatements</a></td>
      <td>5</td>
      <td>disallow empty statements (stray semicolons)</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters">ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters</a></td>
      <td>5</td>
      <td>Don't use quotes (', ", `) as delimiters for the quote-like operators.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator">ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator</a></td>
      <td>5</td>
      <td>Don't write  print <<'__END__' .</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitUnknownBackslash">ValuesAndExpressions::ProhibitUnknownBackslash</a></td>
      <td>5</td>
      <td>don't use undefined backslash forms</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitVersionStrings">ValuesAndExpressions::ProhibitVersionStrings</a></td>
      <td>5</td>
      <td>Don't use strings like v1.4 or 1.4.5 when including other modules.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireConstantOnLeftSideOfEquality">ValuesAndExpressions::RequireConstantOnLeftSideOfEquality</a></td>
      <td>5</td>
      <td>Putting the constant value on the left side of an equality exposes typos.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireConstantVersion">ValuesAndExpressions::RequireConstantVersion</a></td>
      <td>5</td>
      <td>Require $VERSION to be a constant rather than a computed value.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireInterpolationOfMetachars">ValuesAndExpressions::RequireInterpolationOfMetachars</a></td>
      <td>5</td>
      <td>Warns that you might have used single quotes when you really wanted double-quotes.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireNumberSeparators">ValuesAndExpressions::RequireNumberSeparators</a></td>
      <td>5</td>
      <td>Write  141_234_397.0145  instead of  141234397.0145 .</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireNumericVersion">ValuesAndExpressions::RequireNumericVersion</a></td>
      <td>5</td>
      <td>$VERSION a plain number</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireQuotedHeredocTerminator">ValuesAndExpressions::RequireQuotedHeredocTerminator</a></td>
      <td>5</td>
      <td>Write  print <<'THE_END'  or  print <<"THE_END" .</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RequireUpperCaseHeredocTerminator">ValuesAndExpressions::RequireUpperCaseHeredocTerminator</a></td>
      <td>5</td>
      <td>Write  <<'THE_END';  instead of  <<'theEnd'; .</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::RestrictLongStrings">ValuesAndExpressions::RestrictLongStrings</a></td>
      <td>5</td>
      <td>Stop mixing long strings with code.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::UnexpandedSpecialLiteral">ValuesAndExpressions::UnexpandedSpecialLiteral</a></td>
      <td>5</td>
      <td>specials like __PACKAGE__ used literally</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitAugmentedAssignmentInDeclaration">Variables::ProhibitAugmentedAssignmentInDeclaration</a></td>
      <td>5</td>
      <td>Do not write  my $foo .= 'bar'; .</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitConditionalDeclarations">Variables::ProhibitConditionalDeclarations</a></td>
      <td>5</td>
      <td>Do not write  my $foo = $bar if $baz; .</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitEvilVariables">Variables::ProhibitEvilVariables</a></td>
      <td>5</td>
      <td>Ban variables that aren't blessed by your shop.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitLocalVars">Variables::ProhibitLocalVars</a></td>
      <td>5</td>
      <td>Use my instead of local, except when you have to.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitMatchVars">Variables::ProhibitMatchVars</a></td>
      <td>5</td>
      <td>Avoid $`, $&, $' and their English equivalents.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitPackageVars">Variables::ProhibitPackageVars</a></td>
      <td>5</td>
      <td>Eliminate globals declared with our or use vars.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitPerl4PackageNames">Variables::ProhibitPerl4PackageNames</a></td>
      <td>5</td>
      <td>Use double colon (::) to separate package name components instead of single quotes (').</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitPunctuationVars">Variables::ProhibitPunctuationVars</a></td>
      <td>5</td>
      <td>Write $EVAL_ERROR instead of $@.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitReusedNames">Variables::ProhibitReusedNames</a></td>
      <td>5</td>
      <td>Do not reuse a variable name in a lexical scope</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitUnusedVariables">Variables::ProhibitUnusedVariables</a></td>
      <td>5</td>
      <td>Don't ask for storage you don't need.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter">Variables::ProhibitUnusedVarsStricter</a></td>
      <td>5</td>
      <td>Don't ask for storage you don't need.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitUselessInitialization">Variables::ProhibitUselessInitialization</a></td>
      <td>5</td>
      <td>prohibit superfluous initializations</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProtectPrivateVars">Variables::ProtectPrivateVars</a></td>
      <td>5</td>
      <td>Prevent access to private vars in other packages.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::RequireInitializationForLocalVars">Variables::RequireInitializationForLocalVars</a></td>
      <td>5</td>
      <td>Write local $foo = $bar; instead of just local $foo;.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::RequireLexicalLoopIterators">Variables::RequireLexicalLoopIterators</a></td>
      <td>5</td>
      <td>Write for my $element (@list) {...} instead of for $element (@list) {...}.</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::RequireLocalizedPunctuationVars">Variables::RequireLocalizedPunctuationVars</a></td>
      <td>5</td>
      <td>Magic variables should be assigned as "local".</td>
    </tr>
      <tr>
      <td><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::RequireNegativeIndices">Variables::RequireNegativeIndices</a></td>
      <td>5</td>
      <td>Negative array index should be used.</td>
    </tr>
  </table>
