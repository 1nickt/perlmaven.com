=title Stringhe in Perl: quotate, interpolate e con escape
=timestamp 2013-05-15T11:45:03
=indexes stringhe, ', ", \, carattere di escape, interpolazione, quotatura, caratteri incorporati, q, qq
=status show
=original quoted-interpolated-and-escaped-strings-in-perl
=books beginner_book
=author szabgab
=translator giatorta
=archive 1
=comments 1
=social 1

=abstract start

Capire come funzionano le stringhe è importante in ogni linguaggio di programmazione, ma in Perl esse sono
parte dell'essenza del linguaggio. Specialmente se tenete presente che uno degli "acronimi a posteriori" di Perl
è <b>Practical Extraction and Reporting Language</b> ("Linguaggio Pratico per Estrazione e Report"), e per fare questo avete bisogno di molte stringhe.

=abstract end

Le stringhe possono essere racchiuse tra apici singoli <hl>'</hl> o doppi <hl>"</hl> e in base a questo il loro comportamento varia leggermente.

<h2>Stringhe a quotatura singola</h2>

Se racchiudete dei caratteri tra apici singoli <hl>'</hl>, quasi tutti,
fatta eccezione per l'apice stesso <hl>'</hl>,
vengono interpretati esattamente come sono scritti nel code.

<code lang="perl">
my $name = 'Pippo';
print 'Ciao $name, come stai?\n';
</code>

L'output sarà:

<code>
Ciao $name, come stai?\n
</code>

<h2>Stringhe a quotatura doppia</h2>

Le stringhe racchiuse tra doppi apici <hl>"</hl> forniscono l'interpolazione
(altre variabili incorporate nella stringa vengono sostituite con il loro contenuto)
e sostituiscono inoltre le sequenze speciali di escape come <hl>\n</hl> e
<hl>\t</hl> rispettivamente con effettivo carattere di a capo e un effettivo tab.

<code lang="perl">
my $name = 'Pippo';
my $time  = "oggi";
print "Ciao $name,\ncome stai $time?\n";
</code>

L'output sarà

<code>
Ciao Pippo,
come stai oggi?

</code>

Notate che c'è un <hl>\n</hl> subito dopo la virgola nella stringa e un altro alla fine della stringa.

Per stringhe semplici come 'Pippo' e "oggi" che non contengono i caratteri <hl>$</hl>, <hl>@</hl> e <hl>\</hl>
non è importante come vengono quotate.

Le due linee seguenti hanno lo stesso effetto:

<code lang="perl">
$name = 'Pippo';
$name = "Pippo";
</code>


<h2>Indirizzi di E-mail</h2>

Dato che <hl>@</hl> viene interpolato nelle stringhe a quotatura doppia, scrivere degli indirizzi di e-mail
richiede un po' di attenzione.

Tra apici singoli <hl>@</hl> non viene interpolato.

Tra doppi apici il codice qui sotto genera un errore:
<a href="/global-symbol-requires-explicit-package-name">Global symbol "@pluto" requires explicit package name at ... line ...</a>
e un warning:
<b>Possible unintended interpolation of @pluto in string at ... line ...</b>

Quest'ultimo ("Possibile interpolazione involontaria di @pluto nella stringa ...") fornisce forse un indizio migliore su quale sia il vero problema.

<code lang="perl">
use strict;
use warnings;
my $broken_email  = "pippo@pluto.com";
</code>

Questo codice, invece, avendo racchiuso l'indirizzo e-mail tra apici singoli, funziona.

<code lang="perl">
use strict;
use warnings;
my $good_email  = 'pippo@pluto.com';
</code>

E se avete bisogno di interpolare qualche variabile scalare ma volete includere dei caratteri chiocciola <hl>@</hl> nella stringa?

<code lang="perl">
use strict;
use warnings;
my $name = 'pippo';
my $good_email  = "$name\@pluto.com";

print $good_email; # pippo@pluto.com
</code>

Potete sempre fare l'<b>escape</b> dei caratteri speciali, in questo caso la chiocciola <hl>@</hl>, usando il cosiddetto <b>carattere di escape</b>
ovvero il carattere back-slash <hl>\</hl>.

<h2>Usare il carattere dollaro $ nelle stringhe a quotatura doppia</h2>

In modo simile, se volete usare un carattere <hl>$</hl> in una stringa che per altri motivi è racchiusa tra doppi apici, potete farne l'escape:

<code lang="perl">
use strict;
use warnings;
my $name = 'pippo';
print "\$name = $name\n";
</code>

Stampa:

<code>
$name = pippo
</code>

<h2>Escape del carattere di escape</h2>

In alcuni casi, anche se poco frequenti, potreste voler includere un carattere back-slash in una stringa.
Se inserite un back-slash <hl>\</hl> in una stringa (sia a quotatura singola che doppia),
Perl penserà che vogliate fare l'escape del carattere seguente e metterà in campo le sue magie.

Niente paura. Potete dire a Perl di starsene buono facendo l'escape del carattere di escape:

Dovete semplicemente metterci davanti un altro back-slash:

<code lang="perl">
use strict;
use warnings;
my $name = 'pippo';
print "\\$name\n";
</code>

<code>
\pippo
</code>

Capisco che questo fare l'escape del carattere di escape possa sembrare un po' strano, ma in linea di massima funziona così anche in tutti gli altri linguaggi.


Se volete capire bene tutta questa faccenda degli escape, provate qualcosa come:

<code lang="perl">
print "\\\\n\n\\n\n";
</code>

guardate che cosa stampa:

<code>
\\n
\n
</code>

e provate a darvi una spiegazione.

<h2>Escape dei doppi apici</h2>

Abbiamo visto come sia possibile includere delle variabili scalari in stringhe con quotatura doppia e come sia invece possibile fare l'escape del sigillo <hl>$</hl>.

Abbiamo visto come usare il carattere di escape <hl>\</hl> e come fare l'escape dell'escape.

E se ora voleste stampare un doppio apice in una stringa a quotatura doppia?


Questo errore contiene un errore di sintassi:

<code lang="perl">
use strict;
use warnings;
my $name = 'pippo';
print "Il "nome" e' "$name"\n";
</code>

quando Perl vede il doppio apice prima della parola "nome" pensa che esso delimiti la fine della stringa
e protesta per la presenza della <a href="/bareword-in-perl">bareword</a> <b>nome</b>.

Come forse avete già indovinato, dobbiamo fare l'escape del carattere <hl>"</hl>:

<code lang="perl">
use strict;
use warnings;
my $name = 'pippo';
print "Il \"nome\" e' \"$name\"\n";
</code>

Questo codice stampa:

<code>
Il "nome" e' "pippo"
</code>

Funziona, ma non è molto leggibile.


<h2>qq, l'operatore double-q</h2>

In questi casi potete usare l'operatore <hl>qq</hl> detto anche operatore double-q:

<code lang="perl">
use strict;
use warnings;
my $name = 'pippo';
print qq(Il "nome" e' "$name"\n);
</code>

For the untrained eyes, the qq() might look like a function call, but it is not. <hl>qq</hl> is an operator
and you'll see in a second what else it can do, but first let me explain this.

We replace the double-quotes <hl>"</hl> that used to surround the string by the parentheses of the <hl>qq</hl>
operator. This means the double-quotes are not special any more in this string, so we don't need to escape them.
That makes the code a lot more readable.
I'd even call it beautiful, if I did not fear the wrath of the Python programmers.

But what if you would like to include parentheses in you string?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The (name) is "$name"\n);
</code>

No problem. As long as they are balanced
(that is, having the same number of opening <hl>(</hl>, and closing <hl>)</hl> parentheses,
and always having the opening parentheses before the corresponding closing parentheses) Perl can
understand it.

I know. You'll want to break it now, by putting a closing before the opening:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The )name( is "$name"\n);
</code>

Indeed, perl will give you a syntax error about "name" being a <a href="/barewords-in-perl">bareword</a>.
Perl can't understand everything, can it?

You could, of course, escape the parentheses in the string<hl>\)</hl> and <hl>\(</hl>, but we were down that rabbit hole already.
No thank you!

There must be a better way!

Do you remember, I wrote <hl>qq</hl> is an operator and not a function? So it can do tricks, right?

What if we replaced the parentheses around our string by curly braces? <hl>{}</hl>:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq{The )name( is "$name"\n};
</code>

That works and prints the string as we meant:

<code>
The )name( is "foo"
</code>

(even though I have not idea why would I want to print something like that...)

Then <a href="http://perl.plover.com/yak/presentation/samples/slide027.html">the guy from the second row</a> raises his hand,
and ask what if you want both parentheses and curly braces in your string, <b>and</b> you want them imbalanced?

You mean like this, right?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq[The )name} is "$name"\n];
</code>

printing this:

<code>
The )name} is "foo"
</code>


... there must be a use for the square brackets too, right?


<h2>q, the single-q operator</h2>

Similar to <hl>qq</hl> there is also an operator called <hl>q</hl>.
That too allows you select the delimiters of your string, but it works
as a single quote <hl>'</hl> works: It does <b>NOT</b> interpolate variables.

<code lang="perl">
use strict;
use warnings;
print q[The )name} is "$name"\n];
</code>

prints:

<code>
The )name} is "$name"\n
</code>


