=title Name "main::x" used only once: possible typo at ...
=timestamp 2013-03-05T20:31:10
=indexes warnings, strict, possible typo
=status show
=original name-used-only-once-possible-typo.tt
=books beginner_book
=author szabgab
=translator giatorta
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Se vedete questo warning in uno script Perl siete in guai seri.

=abstract end

<h2>Assegnamento a una variabile</h2>

Assegnare un valore a una variabile e poi non usarla
o usare una variabile una sola volta senza assegnarle alcun valore
sono difficilmente delle azioni corrette.

Probabilmente, l'unico caso "legittimo" è quello in cui avete commesso un errore di battitura
(in Inglese: "typo") che spiega il perché avete usato quella variabile una sola volta.

In questo codice d'esempio facciamo <b>solo un assegnamento a una variable</b>:

<code lang="perl">
use warnings;

$x = 42;
</code>

Viene generato un warning del tipo:

<code>
Name "main::x" used only once: possible typo at ...
</code>

Il prefisso "main::" e la mancanza del sigillo $ potrebbero causarvi confusione.
La presenza del prefisso "main::" è dovuta al fatto che per default
ogni variabile in Perl appartiene al namespace "main". Inoltre, ci possono
essere diverse entità chiamate "main::x" e solo una di esse
è preceduta dal simbolo $. Se tutto questo suona strano, non preoccupatevi.
È davvero strano, ma per fortuna non avrete bisogno di occuparvene per un bel po' di tempo.

<h2>Accesso al valore</h2>

Se invece <b>usate una variable una sola volta</b>

<code lang="perl">
use warnings;

print $x;
</code>

probabilmente riceverete due warning:

<code>
Name "main::x" used only once: possible typo at ...
Use of uninitialized value $x in print at ...
</code>

Uno di essi è oggetto della nostra discussione, mentre l'altro è discusso in
<a href="/use-of-uninitialized-value">Use of uninitialized value</a>.


<h2>Che cosa c'entreno i typo?</h2>

Potreste chiedervi.

Immaginate che qualcuno usi una variabile <hl>$l1</hl> nel codice. Quando
tocca a voi lavorare su quel codice volete usare la stessa variabile ma scrivete <hl>$ll</hl>.
In base al vostro font, i due nomi potrebbero avere un aspetto molto simile.

Oppure potrebbe esserci una variabile <hl>$color</hl> ma voi potreste essere Inglese
e digitare automaticamente <hl>$colour</hl> ogni volta che vi volete riferire a quella variabile.

Oppure c'è una variabile <hl>$number_of_misstakes</hl> ma non vi accorgete
dell'errore di battitura nel suo nome e scrivete <hl>$number_of_mistakes</hl>.

Dovreste esservi fatti un'idea.

Se siete fortunati commettete l' errore una sola volta, ma se non lo siete e
usate (almeno) due volte la variabile sbagliata il warning non verrà generato.
Dopo tutto, se state usando lo stesso nome due volte probabilmente avrete le vostre buone ragioni.

Come potete evitare tutto questo?

Anzitutto, evitate quando possibile l'uso di lettere ambigue nei nomi di variabili e fate
molta attenzione quando li digitate.

Ma se volete davvero risolvere il problema, dovete ricorrere a <b>use strict</b>!

<h2>use strict</h2>

As you can see in the above examples, I have not used strict. If I was using it,
then instead of getting a warning about possible typo, I'd get a compile time
error:
<a href="/global-symbol-requires-explicit-package-name">Global symbol requires explicit package name</a>.

That would happen even if you used the incorrect variable more than once.

Then of course there are people who would rush and paste "my" in front of the incorrect
variable, but you are not one of those. are you? You would think about the problem and search till
you find the name of the real variable.

The most common way to see this warning is if you are not using strict.

And then you are in deep trouble.

<h2>Other cases while using strict</h2>

As GlitchMr and an Anonymous commenter pointed out, there are a few other cases:

This code, can also generate it

<code lang="perl">
use strict;
use warnings;

$main::x = 23;
</code>

The warning is: <b>Name "main::x" used only once: possible typo ...</b>

Here at least it is clear where that 'main' comes from, or in
the next example, where the Mister comes from. (hint. it is the package name
other <a href="/global-symbol-requires-explicit-package-name">error about package names</a>
was missing.) In the next example, the package name is 'Mister'.

<code lang="perl">
use strict;
use warnings;

$Mister::x = 23;
</code>

The warning is <b>Name "Mister::x" used only once: possible typo ...</b>.

The following example too generates the warning. Twice:

<code lang="perl">
use strict;
use warnings;

use List::Util qw/reduce/;
print reduce { $a * $b } 1..6;
</code>

<code>
Name "main::a" used only once: possible typo at ...
Name "main::b" used only once: possible typo at ...
</code>

This happens because <hl>$a</hl> and <hl>$b</hl> are
special variables used in the built-in sort function so
you don't need to declare them, but you are only
using them once here.
(Actually it is unclear to me why this generates the warnings,
while the same code using <b>sort</b> does not, but the
<a href="http://www.perlmonks.org/?node_id=1021888">Perl Monks</a> might know.


