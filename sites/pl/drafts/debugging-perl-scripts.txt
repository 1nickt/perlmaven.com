=title Debugging Perl scripts
=timestamp 2013-03-07T19:45:57
=indexes -d, Data::Dumper, print, debug, debugging, $VAR1, $VAR2
=status show
=books beginner
=author szabgab
=comments_disqus_enable 1
=translator rozie
=original debugging-perl-scripts

=abstract start

Kiedy studiowałem informatykę na uczelni, uczyliśmy się wiele o tym jak pisać programy,
ale odkąd pamiętam nikt nie mówił nam o debugowaniu. Słyszeliśmy wiele o pięknym świecie tworzenia
nowych rzeczy, ale nikt nie mówił nam, że większość czasu będziemy musieli spędzać na zrozumieniu
kodu innych ludzi.

Okazuje się, że o ile kochamy pisać program, to spędzamy
o wiele więcej czasu na próbach zrozumienia co my (albo inni) piszą, i dlaczego
zachowuje się to źle, niż na pisaniu go po raz pierwszy.

=abstract end

<h2>Czym jest debugowanie?</h2>

Przed uruchomieniem programu wszystko było w dobrze znanym stanie.

Po uruchomieniu programu coś jest jest nieoczekiwane i w złym stanie.

Zadaniem jest znalezienie w którym miejscu coś poszło nie tak i poprawienie tego.

<h2>Czym jest programowanie i czym jest błąd?</h2>

Zasadniczo, programowanie to drobna zmiana świata przez przekazywanie danych w zmiennych.

W każdym kroku programu zmieniamy pewne dane w zmiennej w programie, albo coś w "prawdziwym świecie".
(Na przykład na dysku albo na ekranie.)

Kiedy piszesz program, myślisz krokami: jaka wartość powinna być przeniesiona do której zmiennej.

Błąd jest w przypadku, kiedy myślałeś, że przekazujesz do zmiennej wartość X, podczas gdy w rzeczywistości
przekazana została wartość Y.

W pewnym punkcie, zwykle na końcu programu, widzisz, że program wyświetlił nieprawidłową wartość.

Podczas wykonania programu, może się to objawiać wystąpieniem ostrzeżenia lub nienormalnym zakończeniem wykonania programu.

<h2>Jak debugować?</h2>

Najprostszym sposobem debugowania programu jest uruchomienie go, i sprawdzanie w każdym kroku, czy wszystkie zmienne
posiadają oczekiwane wartości. Możesz to zrobić albo <b>używając debbugera</b> albo możesz umieścić <b>polecenia print</b> w
programie i sprawdzić wynik później.

Perl przychodzi z bardzo potężnym debbugerem wiersza poleceń. O ile polecam nauczenie się go,
to może być on na początku nieco przerażający. Przygotowałem video, gdzie pokazuję
<a href="/using-the-built-in-debugger-of-perl">podstawowe komendy wbudowanego debuugera Perla</a>.
basic commands of the built-in debugger of Perl</a>.

IDE takie jak <a href="http://www.activestate.com/">Komodo</a>,
<a href="http://eclipse.org/">Eclipse</a> and
<a href="http://padre.perlide.org/">Padre, the Perl IDE</a> przychodzą
z graficznym debuggerem. W pewnym momencie przygotuję video także dla kilku z nich. 

<h2>Polecania print</h2>

Wielu ludzi używa wiekowej strategii dodawania poleceń print w kodzie.

W językach, gdzie kompilacaja i budowa może zająć wiele czasu, polecenia print
są uważane za zły sposób debugowania kodu.
Nie jest tak w Perlu, gdzie nawet duże aplikacje kompilują się i zaczynają działać w przeciągu paru sekund.

Przy dodawaniu poleceń print należy zadbać o dodanie delimiterów wokół wartości. To złapie przypadki
gdzie są otwierające lub kończące spacje, które powodują problem.
Trudno je zauważyć bez delimitera:

Wartości skalarne mogą być wyświetlane tak:

<code lang="perl">
print "<$file_name>\n";
</code>

Here the less than and greater than signs are there only to make it easier for the reader
to see the exact content of the variable:

<code>
<path/to/file
>
</code>

If the above is printed you can quickly notice that there is a trailing newline at the end of the $file_name
variable. Probably you forgot to call <b>chomp</b>.

<h2>Complex data structures</h2>

We have not learned even scalars yet, but let me jump ahead here and show how you would
print out the content of the more complex data structures. If you are reading this
as part of the Perl tutorial then you probably want to skip to the next entry and come back later.
This won't mean too much to you now.

Otherwise, keep reading.

For complex data structures (references, arrays and hashes) you can use the <hl>Data::Dumper</hl>

<code lang="perl">
use Data::Dumper qw(Dumper);

print Dumper \@an_array;
print Dumper \%a_hash;
print Dumper $a_reference;
</code>

These will print something like this, which helps understand the content of the variables,
but shows only a generic variable name such as <hl>$VAR1</hl> and <hl>$VAR2</hl>.

<code>
$VAR1 = [
       'a',
       'b',
       'c'
     ];
$VAR1 = {
       'a' => 1,
       'b' => 2
     };
$VAR1 = {
       'c' => 3,
       'd' => 4
     };
</code>

I'd recommend adding some more code and printing the name of the variable like this:

<code lang="perl">
print '@an_array: ' . Dumper \@an_array;
</code>

to gain:

<code>
@an_array: $VAR1 = [
        'a',
        'b',
        'c'
      ];
</code>

or with Data::Dumper like this:

<code lang="perl">
print Data::Dumper->Dump([\@an_array, \%a_hash, $a_reference],
   [qw(an_array a_hash a_reference)]);
</code>

getting

<code>
$an_array = [
            'a',
            'b',
            'c'
          ];
$a_hash = {
          'a' => 1,
          'b' => 2
        };
$a_reference = {
               'c' => 3,
               'd' => 4
             };
</code>

There are nicer ways to print data structures but at this point <hl>Data::Dumper</hl>
is good enough for our needs and it is available in every perl installation.
We'll discuss other methods later on.

