=title POD - Plain Old Documentation
=timestamp 2013-03-02T18:40:59
=indexes POD, perldoc, =head1, =cut, =pod, =head2, documentation, pod2html, pod2pdf
=status show
=books beginner
=author szabgab
=comments_disqus_enable 1
=translator rozie
=original pod-plain-old-documentation-of-perl

=abstract start

Programiści zwykle nie lubią pisać dokumentajcji. Częściowo z tego powodu, że
programy są zwykle plikami tekstowymi, a w wielu przypadkach od developerów
wymaga się pisania dokumentacji w jakimś edytora tekstu.

To wymaga nauki edytora tekstu i zainwestowania sporej energii w
postaranie się, żeby dokument "dobrze wyglądał" zamiast "miał dobrą treść".

Nie jest tak w przypadku Perla. Normalnie można napisać dokumentację
swoich modułów bezpośrednio w kodzie źródłowym i polegać na 
zewnętrznych narzędziach, które sformatują ją, by wyglądała dobrze.  

=abstract end

W tym odcinku <a href="/perl-tutorial">samouczka Perla</a>
zapoznamy się z <b>POD - Plain Old Documentation</b> który jest
językiem znaczników używanym przez developerów perla.

Prosty kawałek perlowego kodu z POD wygląda tak:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

=pod

=head1 DESCRIPTION

This script can have 2 parameters. The name or address of a machine
and a command. It will execute the command on the given machine and
print the output to the screen.

=cut

print "Here comes the code ... \n";
</code>

Jeśli zapiszesz go jako <hl>script.pl</hl> i uruchomisz używając <hl>perl script.pl</hl>,
perl pominie wszystko pomiędzy liniami <hl>=pod</hl> oraz <hl>=cut</hl>.
Wykona tylko faktyczny kod.

Z drugiej strony, jeśli wpiszesz  <hl>perldoc script.pl</hl>, polecenie <b>perldoc</b>
zignoruje cały kod. Pobierze tylko linie pomiędzy <hl>=pod</hl> oraz <hl>=cut</hl>,
sformatuje je według pewnych reguł i wyświetli je na ekranie.

Reguły te zależą od Twojego systemu operacyjnego, ale są dokłądnie takie same jak
te, które widziałeś kiedy uczyliśmy się o
<a href="/core-perl-documentation-cpan-module-documentation">podstawowej dokumentacji Perla</a>.

Wartością dodaną używania zagnieżdżonego POD is to, że Twój kod nigdy nie będzie
dostarczony przypadkowo bez dokumentacji, gdyż jest ona wewnątrz modułów i skryptów.
Możesz także powtórnie wykorzystaywać narzędzia i infrastrukturę społeczności Open Source Perl
dla siebie. Nawet na wewnętrzny użytek.

<h2>Zbyt proste?</h2>

Założeniem jest, że jeśli usuniesz większość przeszkód do pisania
dokumentacji, wówczas ludzie będą pisać dokumentację. Zamiast uczyć się
korzystania z edytora tekstu do tworzenia ładnie wyglądających dokuemntów, możesz po prostu
wpisać trochę tekstu z dodatkowymi symbolami i otrzymasz rozsądnie wyglądających
dokument. (Sprawdź domumentację na <a href="http://metacpan.org/">Meta CPAN</a>
aby zobaczyć ładnie sformatowane wersjie POD.

<h2>Język znaczników</h2>

Detailed description of the <a href="http://perldoc.perl.org/perlpod.html">POD markup language</a>
can be found by typing in <a href="http://perldoc.perl.org/perlpod.html">perldoc perlpod</a> but
it is very simple.

There are a few tags such as <hl>=head1</hl> and <hl>=head2</hl>
to mark "very important" and "somewhat less important" headers.
There is <hl>=over</hl> to provide indentation and <hl>=item</hl>
to allow the creation of bullet points, and there are a few more.

There is <hl>=cut</hl> to mark the end of a POD section and
<hl>=pod</hl> to start one. Though this starting one isn't strictly required.

Any string that starts with an equal sign <hl>=</hl> as the first character in a row will
be interpreted as a POD markup, and will start a POD section closed by <hl>=cut</hl>

POD even allows the embedding of hyper-links using the L&lt;some-link> notation.

Text between the markup parts will be shown as paragraphs of plain text.

If the text does not start on the first character of the row, it will be taken verbatim,
meaning they will look exactly as you typed them: long lines will stay
long lines and short lines will remain short. This is used for code examples.

An important thing to remember is that POD requires empty rows around the tags.
So

<code lang="perl">
=head1 Title
=head2 Subtitle
Some Text
=cut
</code>

won't do what you are expecting.

<h2>The look</h2>

As POD is a mark-up language it does not by itself define how things will be displayed.
Using an <hl>=head1</hl> indicates something important, <hl>=head2</hl> means something less important.

The tool that is used to display the POD will usually use bigger characters to display the
text of a head1 than that of a head2 which in turn will be displayed using bigger fonts than the regular
text. The control is in the hands of the display tool.

The <hl>perldoc</hl> command that comes with perl displays the POD as a man-page. It is quite useful on Linux.
Not so good on Windows.

The <a href="https://metacpan.org/pod/Pod::Html">Pod::Html</a> module provides another command line tool called
<hl>pod2html</hl>. This can convert a POD to an HTML document you can view in a browser.

There are additional tools to generate pdf or mobi files from POD.

<h2>Who is the audience?</h2>

After seeing the technique, let's see who is the audience?

Comments (the thing that start with a # ) are explanations for
the maintenance programmer. The person who needs to add features
or fix bugs.

Documentation written in POD is for the users. People who should not
look at the source code. In case of an application those will be
so called "end users". That's anyone.

In case of Perl modules, the users are other Perl programmers who need
to build applications or other modules. They still should not
need to look at your source code. They should be able to use
your module just by reading the documentation via the
<hl>perldoc</hl> command.


<h2>Conclusion</h2>

Writing documentation and making it look nice is not that hard in Perl.



